{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _createClass = require(\"/home/vitor/web-projects/starter-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/home/vitor/web-projects/starter-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar googleapis_common_1 = require(\"googleapis-common\"); // tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\n\n\nvar appengine_v1beta;\n\n(function (appengine_v1beta) {\n  /**\n   * App Engine Admin API\n   *\n   * Provisions and manages developers&#39; App Engine applications.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const appengine = google.appengine('v1beta');\n   *\n   * @namespace appengine\n   * @type {Function}\n   * @version v1beta\n   * @variation v1beta\n   * @param {object=} options Options for Appengine\n   */\n  var Appengine = function Appengine(options, google) {\n    _classCallCheck(this, Appengine);\n\n    this.context = {\n      _options: options || {},\n      google: google\n    };\n    this.apps = new Resource$Apps(this.context);\n  };\n\n  appengine_v1beta.Appengine = Appengine;\n\n  var Resource$Apps = /*#__PURE__*/function () {\n    function Resource$Apps(context) {\n      _classCallCheck(this, Resource$Apps);\n\n      this.context = context;\n      this.authorizedCertificates = new Resource$Apps$Authorizedcertificates(this.context);\n      this.authorizedDomains = new Resource$Apps$Authorizeddomains(this.context);\n      this.domainMappings = new Resource$Apps$Domainmappings(this.context);\n      this.firewall = new Resource$Apps$Firewall(this.context);\n      this.locations = new Resource$Apps$Locations(this.context);\n      this.operations = new Resource$Apps$Operations(this.context);\n      this.services = new Resource$Apps$Services(this.context);\n    }\n\n    _createClass(Resource$Apps, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"repair\",\n      value: function repair(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}:repair').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Apps;\n  }();\n\n  appengine_v1beta.Resource$Apps = Resource$Apps;\n\n  var Resource$Apps$Authorizedcertificates = /*#__PURE__*/function () {\n    function Resource$Apps$Authorizedcertificates(context) {\n      _classCallCheck(this, Resource$Apps$Authorizedcertificates);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Apps$Authorizedcertificates, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/authorizedCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'authorizedCertificatesId'],\n          pathParams: ['appsId', 'authorizedCertificatesId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'authorizedCertificatesId'],\n          pathParams: ['appsId', 'authorizedCertificatesId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/authorizedCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'authorizedCertificatesId'],\n          pathParams: ['appsId', 'authorizedCertificatesId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Apps$Authorizedcertificates;\n  }();\n\n  appengine_v1beta.Resource$Apps$Authorizedcertificates = Resource$Apps$Authorizedcertificates;\n\n  var Resource$Apps$Authorizeddomains = /*#__PURE__*/function () {\n    function Resource$Apps$Authorizeddomains(context) {\n      _classCallCheck(this, Resource$Apps$Authorizeddomains);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Apps$Authorizeddomains, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/authorizedDomains').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Apps$Authorizeddomains;\n  }();\n\n  appengine_v1beta.Resource$Apps$Authorizeddomains = Resource$Apps$Authorizeddomains;\n\n  var Resource$Apps$Domainmappings = /*#__PURE__*/function () {\n    function Resource$Apps$Domainmappings(context) {\n      _classCallCheck(this, Resource$Apps$Domainmappings);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Apps$Domainmappings, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/domainMappings').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/domainMappings/{domainMappingsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'domainMappingsId'],\n          pathParams: ['appsId', 'domainMappingsId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/domainMappings/{domainMappingsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'domainMappingsId'],\n          pathParams: ['appsId', 'domainMappingsId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/domainMappings').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/domainMappings/{domainMappingsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'domainMappingsId'],\n          pathParams: ['appsId', 'domainMappingsId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Apps$Domainmappings;\n  }();\n\n  appengine_v1beta.Resource$Apps$Domainmappings = Resource$Apps$Domainmappings;\n\n  var Resource$Apps$Firewall = function Resource$Apps$Firewall(context) {\n    _classCallCheck(this, Resource$Apps$Firewall);\n\n    this.context = context;\n    this.ingressRules = new Resource$Apps$Firewall$Ingressrules(this.context);\n  };\n\n  appengine_v1beta.Resource$Apps$Firewall = Resource$Apps$Firewall;\n\n  var Resource$Apps$Firewall$Ingressrules = /*#__PURE__*/function () {\n    function Resource$Apps$Firewall$Ingressrules(context) {\n      _classCallCheck(this, Resource$Apps$Firewall$Ingressrules);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Apps$Firewall$Ingressrules, [{\n      key: \"batchUpdate\",\n      value: function batchUpdate(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/firewall/ingressRules:batchUpdate').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/firewall/ingressRules').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/firewall/ingressRules/{ingressRulesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'ingressRulesId'],\n          pathParams: ['appsId', 'ingressRulesId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/firewall/ingressRules/{ingressRulesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'ingressRulesId'],\n          pathParams: ['appsId', 'ingressRulesId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/firewall/ingressRules').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/firewall/ingressRules/{ingressRulesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'ingressRulesId'],\n          pathParams: ['appsId', 'ingressRulesId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Apps$Firewall$Ingressrules;\n  }();\n\n  appengine_v1beta.Resource$Apps$Firewall$Ingressrules = Resource$Apps$Firewall$Ingressrules;\n\n  var Resource$Apps$Locations = /*#__PURE__*/function () {\n    function Resource$Apps$Locations(context) {\n      _classCallCheck(this, Resource$Apps$Locations);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Apps$Locations, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/locations/{locationsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'locationsId'],\n          pathParams: ['appsId', 'locationsId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/locations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Apps$Locations;\n  }();\n\n  appengine_v1beta.Resource$Apps$Locations = Resource$Apps$Locations;\n\n  var Resource$Apps$Operations = /*#__PURE__*/function () {\n    function Resource$Apps$Operations(context) {\n      _classCallCheck(this, Resource$Apps$Operations);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Apps$Operations, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/operations/{operationsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'operationsId'],\n          pathParams: ['appsId', 'operationsId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Apps$Operations;\n  }();\n\n  appengine_v1beta.Resource$Apps$Operations = Resource$Apps$Operations;\n\n  var Resource$Apps$Services = /*#__PURE__*/function () {\n    function Resource$Apps$Services(context) {\n      _classCallCheck(this, Resource$Apps$Services);\n\n      this.context = context;\n      this.versions = new Resource$Apps$Services$Versions(this.context);\n    }\n\n    _createClass(Resource$Apps$Services, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/services/{servicesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'servicesId'],\n          pathParams: ['appsId', 'servicesId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/services/{servicesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'servicesId'],\n          pathParams: ['appsId', 'servicesId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/services').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/services/{servicesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'servicesId'],\n          pathParams: ['appsId', 'servicesId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Apps$Services;\n  }();\n\n  appengine_v1beta.Resource$Apps$Services = Resource$Apps$Services;\n\n  var Resource$Apps$Services$Versions = /*#__PURE__*/function () {\n    function Resource$Apps$Services$Versions(context) {\n      _classCallCheck(this, Resource$Apps$Services$Versions);\n\n      this.context = context;\n      this.instances = new Resource$Apps$Services$Versions$Instances(this.context);\n    }\n\n    _createClass(Resource$Apps$Services$Versions, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/services/{servicesId}/versions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'servicesId'],\n          pathParams: ['appsId', 'servicesId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'servicesId', 'versionsId'],\n          pathParams: ['appsId', 'servicesId', 'versionsId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'servicesId', 'versionsId'],\n          pathParams: ['appsId', 'servicesId', 'versionsId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/services/{servicesId}/versions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'servicesId'],\n          pathParams: ['appsId', 'servicesId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'servicesId', 'versionsId'],\n          pathParams: ['appsId', 'servicesId', 'versionsId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Apps$Services$Versions;\n  }();\n\n  appengine_v1beta.Resource$Apps$Services$Versions = Resource$Apps$Services$Versions;\n\n  var Resource$Apps$Services$Versions$Instances = /*#__PURE__*/function () {\n    function Resource$Apps$Services$Versions$Instances(context) {\n      _classCallCheck(this, Resource$Apps$Services$Versions$Instances);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Apps$Services$Versions$Instances, [{\n      key: \"debug\",\n      value: function debug(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}:debug').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'servicesId', 'versionsId', 'instancesId'],\n          pathParams: ['appsId', 'instancesId', 'servicesId', 'versionsId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'servicesId', 'versionsId', 'instancesId'],\n          pathParams: ['appsId', 'instancesId', 'servicesId', 'versionsId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'servicesId', 'versionsId', 'instancesId'],\n          pathParams: ['appsId', 'instancesId', 'servicesId', 'versionsId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'servicesId', 'versionsId'],\n          pathParams: ['appsId', 'servicesId', 'versionsId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Apps$Services$Versions$Instances;\n  }();\n\n  appengine_v1beta.Resource$Apps$Services$Versions$Instances = Resource$Apps$Services$Versions$Instances;\n})(appengine_v1beta = exports.appengine_v1beta || (exports.appengine_v1beta = {}));","map":{"version":3,"sources":["/home/vitor/web-projects/starter-project/node_modules/googleapis/build/src/apis/appengine/v1beta.js"],"names":["Object","defineProperty","exports","value","googleapis_common_1","require","appengine_v1beta","Appengine","options","google","context","_options","apps","Resource$Apps","authorizedCertificates","Resource$Apps$Authorizedcertificates","authorizedDomains","Resource$Apps$Authorizeddomains","domainMappings","Resource$Apps$Domainmappings","firewall","Resource$Apps$Firewall","locations","Resource$Apps$Locations","operations","Resource$Apps$Operations","services","Resource$Apps$Services","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","ingressRules","Resource$Apps$Firewall$Ingressrules","versions","Resource$Apps$Services$Versions","instances","Resource$Apps$Services$Versions$Instances"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst googleapis_common_1 = require(\"googleapis-common\");\n// tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\nvar appengine_v1beta;\n(function (appengine_v1beta) {\n    /**\n     * App Engine Admin API\n     *\n     * Provisions and manages developers&#39; App Engine applications.\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const appengine = google.appengine('v1beta');\n     *\n     * @namespace appengine\n     * @type {Function}\n     * @version v1beta\n     * @variation v1beta\n     * @param {object=} options Options for Appengine\n     */\n    class Appengine {\n        constructor(options, google) {\n            this.context = { _options: options || {}, google };\n            this.apps = new Resource$Apps(this.context);\n        }\n    }\n    appengine_v1beta.Appengine = Appengine;\n    class Resource$Apps {\n        constructor(context) {\n            this.context = context;\n            this.authorizedCertificates =\n                new Resource$Apps$Authorizedcertificates(this.context);\n            this.authorizedDomains =\n                new Resource$Apps$Authorizeddomains(this.context);\n            this.domainMappings = new Resource$Apps$Domainmappings(this.context);\n            this.firewall = new Resource$Apps$Firewall(this.context);\n            this.locations = new Resource$Apps$Locations(this.context);\n            this.operations = new Resource$Apps$Operations(this.context);\n            this.services = new Resource$Apps$Services(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/apps').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/apps/{appsId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/apps/{appsId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        repair(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/apps/{appsId}:repair')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    appengine_v1beta.Resource$Apps = Resource$Apps;\n    class Resource$Apps$Authorizedcertificates {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/apps/{appsId}/authorizedCertificates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1beta/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['appsId', 'authorizedCertificatesId'],\n                pathParams: ['appsId', 'authorizedCertificatesId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1beta/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['appsId', 'authorizedCertificatesId'],\n                pathParams: ['appsId', 'authorizedCertificatesId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/apps/{appsId}/authorizedCertificates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1beta/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['appsId', 'authorizedCertificatesId'],\n                pathParams: ['appsId', 'authorizedCertificatesId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    appengine_v1beta.Resource$Apps$Authorizedcertificates = Resource$Apps$Authorizedcertificates;\n    class Resource$Apps$Authorizeddomains {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/apps/{appsId}/authorizedDomains')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    appengine_v1beta.Resource$Apps$Authorizeddomains = Resource$Apps$Authorizeddomains;\n    class Resource$Apps$Domainmappings {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/apps/{appsId}/domainMappings')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1beta/apps/{appsId}/domainMappings/{domainMappingsId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['appsId', 'domainMappingsId'],\n                pathParams: ['appsId', 'domainMappingsId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1beta/apps/{appsId}/domainMappings/{domainMappingsId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['appsId', 'domainMappingsId'],\n                pathParams: ['appsId', 'domainMappingsId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/apps/{appsId}/domainMappings')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1beta/apps/{appsId}/domainMappings/{domainMappingsId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['appsId', 'domainMappingsId'],\n                pathParams: ['appsId', 'domainMappingsId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    appengine_v1beta.Resource$Apps$Domainmappings = Resource$Apps$Domainmappings;\n    class Resource$Apps$Firewall {\n        constructor(context) {\n            this.context = context;\n            this.ingressRules = new Resource$Apps$Firewall$Ingressrules(this.context);\n        }\n    }\n    appengine_v1beta.Resource$Apps$Firewall = Resource$Apps$Firewall;\n    class Resource$Apps$Firewall$Ingressrules {\n        constructor(context) {\n            this.context = context;\n        }\n        batchUpdate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1beta/apps/{appsId}/firewall/ingressRules:batchUpdate')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/apps/{appsId}/firewall/ingressRules')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1beta/apps/{appsId}/firewall/ingressRules/{ingressRulesId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['appsId', 'ingressRulesId'],\n                pathParams: ['appsId', 'ingressRulesId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1beta/apps/{appsId}/firewall/ingressRules/{ingressRulesId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['appsId', 'ingressRulesId'],\n                pathParams: ['appsId', 'ingressRulesId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/apps/{appsId}/firewall/ingressRules')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1beta/apps/{appsId}/firewall/ingressRules/{ingressRulesId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['appsId', 'ingressRulesId'],\n                pathParams: ['appsId', 'ingressRulesId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    appengine_v1beta.Resource$Apps$Firewall$Ingressrules = Resource$Apps$Firewall$Ingressrules;\n    class Resource$Apps$Locations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/apps/{appsId}/locations/{locationsId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['appsId', 'locationsId'],\n                pathParams: ['appsId', 'locationsId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/apps/{appsId}/locations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    appengine_v1beta.Resource$Apps$Locations = Resource$Apps$Locations;\n    class Resource$Apps$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/apps/{appsId}/operations/{operationsId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['appsId', 'operationsId'],\n                pathParams: ['appsId', 'operationsId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/apps/{appsId}/operations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    appengine_v1beta.Resource$Apps$Operations = Resource$Apps$Operations;\n    class Resource$Apps$Services {\n        constructor(context) {\n            this.context = context;\n            this.versions = new Resource$Apps$Services$Versions(this.context);\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/apps/{appsId}/services/{servicesId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['appsId', 'servicesId'],\n                pathParams: ['appsId', 'servicesId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/apps/{appsId}/services/{servicesId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['appsId', 'servicesId'],\n                pathParams: ['appsId', 'servicesId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/apps/{appsId}/services')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/apps/{appsId}/services/{servicesId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['appsId', 'servicesId'],\n                pathParams: ['appsId', 'servicesId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    appengine_v1beta.Resource$Apps$Services = Resource$Apps$Services;\n    class Resource$Apps$Services$Versions {\n        constructor(context) {\n            this.context = context;\n            this.instances =\n                new Resource$Apps$Services$Versions$Instances(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1beta/apps/{appsId}/services/{servicesId}/versions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['appsId', 'servicesId'],\n                pathParams: ['appsId', 'servicesId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['appsId', 'servicesId', 'versionsId'],\n                pathParams: ['appsId', 'servicesId', 'versionsId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['appsId', 'servicesId', 'versionsId'],\n                pathParams: ['appsId', 'servicesId', 'versionsId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1beta/apps/{appsId}/services/{servicesId}/versions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['appsId', 'servicesId'],\n                pathParams: ['appsId', 'servicesId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['appsId', 'servicesId', 'versionsId'],\n                pathParams: ['appsId', 'servicesId', 'versionsId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    appengine_v1beta.Resource$Apps$Services$Versions = Resource$Apps$Services$Versions;\n    class Resource$Apps$Services$Versions$Instances {\n        constructor(context) {\n            this.context = context;\n        }\n        debug(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}:debug')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['appsId', 'servicesId', 'versionsId', 'instancesId'],\n                pathParams: ['appsId', 'instancesId', 'servicesId', 'versionsId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['appsId', 'servicesId', 'versionsId', 'instancesId'],\n                pathParams: ['appsId', 'instancesId', 'servicesId', 'versionsId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['appsId', 'servicesId', 'versionsId', 'instancesId'],\n                pathParams: ['appsId', 'instancesId', 'servicesId', 'versionsId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['appsId', 'servicesId', 'versionsId'],\n                pathParams: ['appsId', 'servicesId', 'versionsId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    appengine_v1beta.Resource$Apps$Services$Versions$Instances = Resource$Apps$Services$Versions$Instances;\n})(appengine_v1beta = exports.appengine_v1beta || (exports.appengine_v1beta = {}));\n//# sourceMappingURL=v1beta.js.map"]},"metadata":{},"sourceType":"script"}