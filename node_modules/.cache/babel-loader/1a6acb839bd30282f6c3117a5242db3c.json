{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _createClass = require(\"/home/vitor/web-projects/starter-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/home/vitor/web-projects/starter-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar googleapis_common_1 = require(\"googleapis-common\"); // tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\n\n\nvar admin_directory_v1;\n\n(function (admin_directory_v1) {\n  /**\n   * Admin Directory API\n   *\n   * Manages enterprise resources such as users and groups, administrative\n   * notifications, security features, and more.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const admin = google.admin('directory_v1');\n   *\n   * @namespace admin\n   * @type {Function}\n   * @version directory_v1\n   * @variation directory_v1\n   * @param {object=} options Options for Admin\n   */\n  var Admin = function Admin(options, google) {\n    _classCallCheck(this, Admin);\n\n    this.context = {\n      _options: options || {},\n      google: google\n    };\n    this.asps = new Resource$Asps(this.context);\n    this.channels = new Resource$Channels(this.context);\n    this.chromeosdevices = new Resource$Chromeosdevices(this.context);\n    this.customers = new Resource$Customers(this.context);\n    this.domainAliases = new Resource$Domainaliases(this.context);\n    this.domains = new Resource$Domains(this.context);\n    this.groups = new Resource$Groups(this.context);\n    this.members = new Resource$Members(this.context);\n    this.mobiledevices = new Resource$Mobiledevices(this.context);\n    this.notifications = new Resource$Notifications(this.context);\n    this.orgunits = new Resource$Orgunits(this.context);\n    this.privileges = new Resource$Privileges(this.context);\n    this.resolvedAppAccessSettings = new Resource$Resolvedappaccesssettings(this.context);\n    this.resources = new Resource$Resources(this.context);\n    this.roleAssignments = new Resource$Roleassignments(this.context);\n    this.roles = new Resource$Roles(this.context);\n    this.schemas = new Resource$Schemas(this.context);\n    this.tokens = new Resource$Tokens(this.context);\n    this.users = new Resource$Users(this.context);\n    this.verificationCodes = new Resource$Verificationcodes(this.context);\n  };\n\n  admin_directory_v1.Admin = Admin;\n\n  var Resource$Asps = /*#__PURE__*/function () {\n    function Resource$Asps(context) {\n      _classCallCheck(this, Resource$Asps);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Asps, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}/asps/{codeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['userKey', 'codeId'],\n          pathParams: ['codeId', 'userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}/asps/{codeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['userKey', 'codeId'],\n          pathParams: ['codeId', 'userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}/asps').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Asps;\n  }();\n\n  admin_directory_v1.Resource$Asps = Resource$Asps;\n\n  var Resource$Channels = /*#__PURE__*/function () {\n    function Resource$Channels(context) {\n      _classCallCheck(this, Resource$Channels);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Channels, [{\n      key: \"stop\",\n      value: function stop(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/admin/directory_v1/channels/stop').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Channels;\n  }();\n\n  admin_directory_v1.Resource$Channels = Resource$Channels;\n\n  var Resource$Chromeosdevices = /*#__PURE__*/function () {\n    function Resource$Chromeosdevices(context) {\n      _classCallCheck(this, Resource$Chromeosdevices);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Chromeosdevices, [{\n      key: \"action\",\n      value: function action(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['customerId', 'resourceId'],\n          pathParams: ['customerId', 'resourceId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['customerId', 'deviceId'],\n          pathParams: ['customerId', 'deviceId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/chromeos').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['customerId'],\n          pathParams: ['customerId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"moveDevicesToOu\",\n      value: function moveDevicesToOu(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['customerId', 'orgUnitPath'],\n          pathParams: ['customerId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['customerId', 'deviceId'],\n          pathParams: ['customerId', 'deviceId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['customerId', 'deviceId'],\n          pathParams: ['customerId', 'deviceId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Chromeosdevices;\n  }();\n\n  admin_directory_v1.Resource$Chromeosdevices = Resource$Chromeosdevices;\n\n  var Resource$Customers = /*#__PURE__*/function () {\n    function Resource$Customers(context) {\n      _classCallCheck(this, Resource$Customers);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Customers, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customers/{customerKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['customerKey'],\n          pathParams: ['customerKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customers/{customerKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['customerKey'],\n          pathParams: ['customerKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customers/{customerKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['customerKey'],\n          pathParams: ['customerKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Customers;\n  }();\n\n  admin_directory_v1.Resource$Customers = Resource$Customers;\n\n  var Resource$Domainaliases = /*#__PURE__*/function () {\n    function Resource$Domainaliases(context) {\n      _classCallCheck(this, Resource$Domainaliases);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Domainaliases, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['customer', 'domainAliasName'],\n          pathParams: ['customer', 'domainAliasName'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['customer', 'domainAliasName'],\n          pathParams: ['customer', 'domainAliasName'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/domainaliases').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['customer'],\n          pathParams: ['customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/domainaliases').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['customer'],\n          pathParams: ['customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Domainaliases;\n  }();\n\n  admin_directory_v1.Resource$Domainaliases = Resource$Domainaliases;\n\n  var Resource$Domains = /*#__PURE__*/function () {\n    function Resource$Domains(context) {\n      _classCallCheck(this, Resource$Domains);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Domains, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/domains/{domainName}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['customer', 'domainName'],\n          pathParams: ['customer', 'domainName'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/domains/{domainName}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['customer', 'domainName'],\n          pathParams: ['customer', 'domainName'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/domains').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['customer'],\n          pathParams: ['customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/domains').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['customer'],\n          pathParams: ['customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Domains;\n  }();\n\n  admin_directory_v1.Resource$Domains = Resource$Domains;\n\n  var Resource$Groups = /*#__PURE__*/function () {\n    function Resource$Groups(context) {\n      _classCallCheck(this, Resource$Groups);\n\n      this.context = context;\n      this.aliases = new Resource$Groups$Aliases(this.context);\n    }\n\n    _createClass(Resource$Groups, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/groups/{groupKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['groupKey'],\n          pathParams: ['groupKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/groups/{groupKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['groupKey'],\n          pathParams: ['groupKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/groups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/groups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/groups/{groupKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['groupKey'],\n          pathParams: ['groupKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/groups/{groupKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['groupKey'],\n          pathParams: ['groupKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Groups;\n  }();\n\n  admin_directory_v1.Resource$Groups = Resource$Groups;\n\n  var Resource$Groups$Aliases = /*#__PURE__*/function () {\n    function Resource$Groups$Aliases(context) {\n      _classCallCheck(this, Resource$Groups$Aliases);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Groups$Aliases, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/aliases/{alias}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['groupKey', 'alias'],\n          pathParams: ['alias', 'groupKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/aliases').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['groupKey'],\n          pathParams: ['groupKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/aliases').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['groupKey'],\n          pathParams: ['groupKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Groups$Aliases;\n  }();\n\n  admin_directory_v1.Resource$Groups$Aliases = Resource$Groups$Aliases;\n\n  var Resource$Members = /*#__PURE__*/function () {\n    function Resource$Members(context) {\n      _classCallCheck(this, Resource$Members);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Members, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/members/{memberKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['groupKey', 'memberKey'],\n          pathParams: ['groupKey', 'memberKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/members/{memberKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['groupKey', 'memberKey'],\n          pathParams: ['groupKey', 'memberKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"hasMember\",\n      value: function hasMember(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['groupKey', 'memberKey'],\n          pathParams: ['groupKey', 'memberKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/members').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['groupKey'],\n          pathParams: ['groupKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/members').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['groupKey'],\n          pathParams: ['groupKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/members/{memberKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['groupKey', 'memberKey'],\n          pathParams: ['groupKey', 'memberKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/members/{memberKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['groupKey', 'memberKey'],\n          pathParams: ['groupKey', 'memberKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Members;\n  }();\n\n  admin_directory_v1.Resource$Members = Resource$Members;\n\n  var Resource$Mobiledevices = /*#__PURE__*/function () {\n    function Resource$Mobiledevices(context) {\n      _classCallCheck(this, Resource$Mobiledevices);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Mobiledevices, [{\n      key: \"action\",\n      value: function action(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['customerId', 'resourceId'],\n          pathParams: ['customerId', 'resourceId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['customerId', 'resourceId'],\n          pathParams: ['customerId', 'resourceId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['customerId', 'resourceId'],\n          pathParams: ['customerId', 'resourceId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/devices/mobile').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['customerId'],\n          pathParams: ['customerId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Mobiledevices;\n  }();\n\n  admin_directory_v1.Resource$Mobiledevices = Resource$Mobiledevices;\n\n  var Resource$Notifications = /*#__PURE__*/function () {\n    function Resource$Notifications(context) {\n      _classCallCheck(this, Resource$Notifications);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Notifications, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/notifications/{notificationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['customer', 'notificationId'],\n          pathParams: ['customer', 'notificationId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/notifications/{notificationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['customer', 'notificationId'],\n          pathParams: ['customer', 'notificationId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/notifications').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['customer'],\n          pathParams: ['customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/notifications/{notificationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['customer', 'notificationId'],\n          pathParams: ['customer', 'notificationId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/notifications/{notificationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['customer', 'notificationId'],\n          pathParams: ['customer', 'notificationId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Notifications;\n  }();\n\n  admin_directory_v1.Resource$Notifications = Resource$Notifications;\n\n  var Resource$Orgunits = /*#__PURE__*/function () {\n    function Resource$Orgunits(context) {\n      _classCallCheck(this, Resource$Orgunits);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Orgunits, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/orgunits{/orgUnitPath*}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['customerId', 'orgUnitPath'],\n          pathParams: ['customerId', 'orgUnitPath'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/orgunits{/orgUnitPath*}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['customerId', 'orgUnitPath'],\n          pathParams: ['customerId', 'orgUnitPath'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/orgunits').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['customerId'],\n          pathParams: ['customerId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/orgunits').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['customerId'],\n          pathParams: ['customerId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/orgunits{/orgUnitPath*}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['customerId', 'orgUnitPath'],\n          pathParams: ['customerId', 'orgUnitPath'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/orgunits{/orgUnitPath*}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['customerId', 'orgUnitPath'],\n          pathParams: ['customerId', 'orgUnitPath'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Orgunits;\n  }();\n\n  admin_directory_v1.Resource$Orgunits = Resource$Orgunits;\n\n  var Resource$Privileges = /*#__PURE__*/function () {\n    function Resource$Privileges(context) {\n      _classCallCheck(this, Resource$Privileges);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Privileges, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles/ALL/privileges').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['customer'],\n          pathParams: ['customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Privileges;\n  }();\n\n  admin_directory_v1.Resource$Privileges = Resource$Privileges;\n\n  var Resource$Resolvedappaccesssettings = /*#__PURE__*/function () {\n    function Resource$Resolvedappaccesssettings(context) {\n      _classCallCheck(this, Resource$Resolvedappaccesssettings);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Resolvedappaccesssettings, [{\n      key: \"GetSettings\",\n      value: function GetSettings(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/resolvedappaccesssettings').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"ListTrustedApps\",\n      value: function ListTrustedApps(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/trustedapps').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Resolvedappaccesssettings;\n  }();\n\n  admin_directory_v1.Resource$Resolvedappaccesssettings = Resource$Resolvedappaccesssettings;\n\n  var Resource$Resources = function Resource$Resources(context) {\n    _classCallCheck(this, Resource$Resources);\n\n    this.context = context;\n    this.buildings = new Resource$Resources$Buildings(this.context);\n    this.calendars = new Resource$Resources$Calendars(this.context);\n    this.features = new Resource$Resources$Features(this.context);\n  };\n\n  admin_directory_v1.Resource$Resources = Resource$Resources;\n\n  var Resource$Resources$Buildings = /*#__PURE__*/function () {\n    function Resource$Resources$Buildings(context) {\n      _classCallCheck(this, Resource$Resources$Buildings);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Resources$Buildings, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['customer', 'buildingId'],\n          pathParams: ['buildingId', 'customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['customer', 'buildingId'],\n          pathParams: ['buildingId', 'customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/buildings').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['customer'],\n          pathParams: ['customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/buildings').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['customer'],\n          pathParams: ['customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['customer', 'buildingId'],\n          pathParams: ['buildingId', 'customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['customer', 'buildingId'],\n          pathParams: ['buildingId', 'customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Resources$Buildings;\n  }();\n\n  admin_directory_v1.Resource$Resources$Buildings = Resource$Resources$Buildings;\n\n  var Resource$Resources$Calendars = /*#__PURE__*/function () {\n    function Resource$Resources$Calendars(context) {\n      _classCallCheck(this, Resource$Resources$Calendars);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Resources$Calendars, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['customer', 'calendarResourceId'],\n          pathParams: ['calendarResourceId', 'customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['customer', 'calendarResourceId'],\n          pathParams: ['calendarResourceId', 'customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/calendars').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['customer'],\n          pathParams: ['customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/calendars').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['customer'],\n          pathParams: ['customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['customer', 'calendarResourceId'],\n          pathParams: ['calendarResourceId', 'customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['customer', 'calendarResourceId'],\n          pathParams: ['calendarResourceId', 'customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Resources$Calendars;\n  }();\n\n  admin_directory_v1.Resource$Resources$Calendars = Resource$Resources$Calendars;\n\n  var Resource$Resources$Features = /*#__PURE__*/function () {\n    function Resource$Resources$Features(context) {\n      _classCallCheck(this, Resource$Resources$Features);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Resources$Features, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/features/{featureKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['customer', 'featureKey'],\n          pathParams: ['customer', 'featureKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/features/{featureKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['customer', 'featureKey'],\n          pathParams: ['customer', 'featureKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/features').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['customer'],\n          pathParams: ['customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/features').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['customer'],\n          pathParams: ['customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/features/{featureKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['customer', 'featureKey'],\n          pathParams: ['customer', 'featureKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"rename\",\n      value: function rename(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['customer', 'oldName'],\n          pathParams: ['customer', 'oldName'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/resources/features/{featureKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['customer', 'featureKey'],\n          pathParams: ['customer', 'featureKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Resources$Features;\n  }();\n\n  admin_directory_v1.Resource$Resources$Features = Resource$Resources$Features;\n\n  var Resource$Roleassignments = /*#__PURE__*/function () {\n    function Resource$Roleassignments(context) {\n      _classCallCheck(this, Resource$Roleassignments);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Roleassignments, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['customer', 'roleAssignmentId'],\n          pathParams: ['customer', 'roleAssignmentId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['customer', 'roleAssignmentId'],\n          pathParams: ['customer', 'roleAssignmentId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/roleassignments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['customer'],\n          pathParams: ['customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/roleassignments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['customer'],\n          pathParams: ['customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Roleassignments;\n  }();\n\n  admin_directory_v1.Resource$Roleassignments = Resource$Roleassignments;\n\n  var Resource$Roles = /*#__PURE__*/function () {\n    function Resource$Roles(context) {\n      _classCallCheck(this, Resource$Roles);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Roles, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles/{roleId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['customer', 'roleId'],\n          pathParams: ['customer', 'roleId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles/{roleId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['customer', 'roleId'],\n          pathParams: ['customer', 'roleId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['customer'],\n          pathParams: ['customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['customer'],\n          pathParams: ['customer'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles/{roleId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['customer', 'roleId'],\n          pathParams: ['customer', 'roleId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles/{roleId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['customer', 'roleId'],\n          pathParams: ['customer', 'roleId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Roles;\n  }();\n\n  admin_directory_v1.Resource$Roles = Resource$Roles;\n\n  var Resource$Schemas = /*#__PURE__*/function () {\n    function Resource$Schemas(context) {\n      _classCallCheck(this, Resource$Schemas);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Schemas, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['customerId', 'schemaKey'],\n          pathParams: ['customerId', 'schemaKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['customerId', 'schemaKey'],\n          pathParams: ['customerId', 'schemaKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/schemas').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['customerId'],\n          pathParams: ['customerId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/schemas').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['customerId'],\n          pathParams: ['customerId'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['customerId', 'schemaKey'],\n          pathParams: ['customerId', 'schemaKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['customerId', 'schemaKey'],\n          pathParams: ['customerId', 'schemaKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Schemas;\n  }();\n\n  admin_directory_v1.Resource$Schemas = Resource$Schemas;\n\n  var Resource$Tokens = /*#__PURE__*/function () {\n    function Resource$Tokens(context) {\n      _classCallCheck(this, Resource$Tokens);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Tokens, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}/tokens/{clientId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['userKey', 'clientId'],\n          pathParams: ['clientId', 'userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}/tokens/{clientId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['userKey', 'clientId'],\n          pathParams: ['clientId', 'userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}/tokens').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Tokens;\n  }();\n\n  admin_directory_v1.Resource$Tokens = Resource$Tokens;\n\n  var Resource$Users = /*#__PURE__*/function () {\n    function Resource$Users(context) {\n      _classCallCheck(this, Resource$Users);\n\n      this.context = context;\n      this.aliases = new Resource$Users$Aliases(this.context);\n      this.photos = new Resource$Users$Photos(this.context);\n    }\n\n    _createClass(Resource$Users, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"makeAdmin\",\n      value: function makeAdmin(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}/makeAdmin').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"undelete\",\n      value: function undelete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}/undelete').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"watch\",\n      value: function watch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/watch').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Users;\n  }();\n\n  admin_directory_v1.Resource$Users = Resource$Users;\n\n  var Resource$Users$Aliases = /*#__PURE__*/function () {\n    function Resource$Users$Aliases(context) {\n      _classCallCheck(this, Resource$Users$Aliases);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Users$Aliases, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}/aliases/{alias}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['userKey', 'alias'],\n          pathParams: ['alias', 'userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}/aliases').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}/aliases').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"watch\",\n      value: function watch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}/aliases/watch').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Users$Aliases;\n  }();\n\n  admin_directory_v1.Resource$Users$Aliases = Resource$Users$Aliases;\n\n  var Resource$Users$Photos = /*#__PURE__*/function () {\n    function Resource$Users$Photos(context) {\n      _classCallCheck(this, Resource$Users$Photos);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Users$Photos, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}/photos/thumbnail').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}/photos/thumbnail').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}/photos/thumbnail').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}/photos/thumbnail').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Users$Photos;\n  }();\n\n  admin_directory_v1.Resource$Users$Photos = Resource$Users$Photos;\n\n  var Resource$Verificationcodes = /*#__PURE__*/function () {\n    function Resource$Verificationcodes(context) {\n      _classCallCheck(this, Resource$Verificationcodes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Verificationcodes, [{\n      key: \"generate\",\n      value: function generate(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}/verificationCodes/generate').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"invalidate\",\n      value: function invalidate(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}/verificationCodes/invalidate').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/admin/directory/v1/users/{userKey}/verificationCodes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['userKey'],\n          pathParams: ['userKey'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Verificationcodes;\n  }();\n\n  admin_directory_v1.Resource$Verificationcodes = Resource$Verificationcodes;\n})(admin_directory_v1 = exports.admin_directory_v1 || (exports.admin_directory_v1 = {}));","map":{"version":3,"sources":["/home/vitor/web-projects/starter-project/node_modules/googleapis/build/src/apis/admin/directory_v1.js"],"names":["Object","defineProperty","exports","value","googleapis_common_1","require","admin_directory_v1","Admin","options","google","context","_options","asps","Resource$Asps","channels","Resource$Channels","chromeosdevices","Resource$Chromeosdevices","customers","Resource$Customers","domainAliases","Resource$Domainaliases","domains","Resource$Domains","groups","Resource$Groups","members","Resource$Members","mobiledevices","Resource$Mobiledevices","notifications","Resource$Notifications","orgunits","Resource$Orgunits","privileges","Resource$Privileges","resolvedAppAccessSettings","Resource$Resolvedappaccesssettings","resources","Resource$Resources","roleAssignments","Resource$Roleassignments","roles","Resource$Roles","schemas","Resource$Schemas","tokens","Resource$Tokens","users","Resource$Users","verificationCodes","Resource$Verificationcodes","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","aliases","Resource$Groups$Aliases","buildings","Resource$Resources$Buildings","calendars","Resource$Resources$Calendars","features","Resource$Resources$Features","Resource$Users$Aliases","photos","Resource$Users$Photos"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst googleapis_common_1 = require(\"googleapis-common\");\n// tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\nvar admin_directory_v1;\n(function (admin_directory_v1) {\n    /**\n     * Admin Directory API\n     *\n     * Manages enterprise resources such as users and groups, administrative\n     * notifications, security features, and more.\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const admin = google.admin('directory_v1');\n     *\n     * @namespace admin\n     * @type {Function}\n     * @version directory_v1\n     * @variation directory_v1\n     * @param {object=} options Options for Admin\n     */\n    class Admin {\n        constructor(options, google) {\n            this.context = { _options: options || {}, google };\n            this.asps = new Resource$Asps(this.context);\n            this.channels = new Resource$Channels(this.context);\n            this.chromeosdevices = new Resource$Chromeosdevices(this.context);\n            this.customers = new Resource$Customers(this.context);\n            this.domainAliases = new Resource$Domainaliases(this.context);\n            this.domains = new Resource$Domains(this.context);\n            this.groups = new Resource$Groups(this.context);\n            this.members = new Resource$Members(this.context);\n            this.mobiledevices = new Resource$Mobiledevices(this.context);\n            this.notifications = new Resource$Notifications(this.context);\n            this.orgunits = new Resource$Orgunits(this.context);\n            this.privileges = new Resource$Privileges(this.context);\n            this.resolvedAppAccessSettings =\n                new Resource$Resolvedappaccesssettings(this.context);\n            this.resources = new Resource$Resources(this.context);\n            this.roleAssignments = new Resource$Roleassignments(this.context);\n            this.roles = new Resource$Roles(this.context);\n            this.schemas = new Resource$Schemas(this.context);\n            this.tokens = new Resource$Tokens(this.context);\n            this.users = new Resource$Users(this.context);\n            this.verificationCodes = new Resource$Verificationcodes(this.context);\n        }\n    }\n    admin_directory_v1.Admin = Admin;\n    class Resource$Asps {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/users/{userKey}/asps/{codeId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['userKey', 'codeId'],\n                pathParams: ['codeId', 'userKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/users/{userKey}/asps/{codeId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['userKey', 'codeId'],\n                pathParams: ['codeId', 'userKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/asps')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Asps = Resource$Asps;\n    class Resource$Channels {\n        constructor(context) {\n            this.context = context;\n        }\n        stop(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/admin/directory_v1/channels/stop')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Channels = Resource$Channels;\n    class Resource$Chromeosdevices {\n        constructor(context) {\n            this.context = context;\n        }\n        action(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['customerId', 'resourceId'],\n                pathParams: ['customerId', 'resourceId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['customerId', 'deviceId'],\n                pathParams: ['customerId', 'deviceId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/chromeos')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['customerId'],\n                pathParams: ['customerId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        moveDevicesToOu(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['customerId', 'orgUnitPath'],\n                pathParams: ['customerId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['customerId', 'deviceId'],\n                pathParams: ['customerId', 'deviceId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['customerId', 'deviceId'],\n                pathParams: ['customerId', 'deviceId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Chromeosdevices = Resource$Chromeosdevices;\n    class Resource$Customers {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customers/{customerKey}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['customerKey'],\n                pathParams: ['customerKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customers/{customerKey}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['customerKey'],\n                pathParams: ['customerKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customers/{customerKey}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['customerKey'],\n                pathParams: ['customerKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Customers = Resource$Customers;\n    class Resource$Domainaliases {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['customer', 'domainAliasName'],\n                pathParams: ['customer', 'domainAliasName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['customer', 'domainAliasName'],\n                pathParams: ['customer', 'domainAliasName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/domainaliases')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/domainaliases')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Domainaliases = Resource$Domainaliases;\n    class Resource$Domains {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/domains/{domainName}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['customer', 'domainName'],\n                pathParams: ['customer', 'domainName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/domains/{domainName}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['customer', 'domainName'],\n                pathParams: ['customer', 'domainName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customer}/domains')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customer}/domains')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Domains = Resource$Domains;\n    class Resource$Groups {\n        constructor(context) {\n            this.context = context;\n            this.aliases = new Resource$Groups$Aliases(this.context);\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups/{groupKey}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['groupKey'],\n                pathParams: ['groupKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups/{groupKey}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['groupKey'],\n                pathParams: ['groupKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups/{groupKey}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['groupKey'],\n                pathParams: ['groupKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups/{groupKey}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['groupKey'],\n                pathParams: ['groupKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Groups = Resource$Groups;\n    class Resource$Groups$Aliases {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/groups/{groupKey}/aliases/{alias}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['groupKey', 'alias'],\n                pathParams: ['alias', 'groupKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/aliases')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['groupKey'],\n                pathParams: ['groupKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/aliases')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['groupKey'],\n                pathParams: ['groupKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Groups$Aliases = Resource$Groups$Aliases;\n    class Resource$Members {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/groups/{groupKey}/members/{memberKey}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['groupKey', 'memberKey'],\n                pathParams: ['groupKey', 'memberKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/groups/{groupKey}/members/{memberKey}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['groupKey', 'memberKey'],\n                pathParams: ['groupKey', 'memberKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        hasMember(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['groupKey', 'memberKey'],\n                pathParams: ['groupKey', 'memberKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/members')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['groupKey'],\n                pathParams: ['groupKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/groups/{groupKey}/members')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['groupKey'],\n                pathParams: ['groupKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/groups/{groupKey}/members/{memberKey}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['groupKey', 'memberKey'],\n                pathParams: ['groupKey', 'memberKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/groups/{groupKey}/members/{memberKey}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['groupKey', 'memberKey'],\n                pathParams: ['groupKey', 'memberKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Members = Resource$Members;\n    class Resource$Mobiledevices {\n        constructor(context) {\n            this.context = context;\n        }\n        action(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['customerId', 'resourceId'],\n                pathParams: ['customerId', 'resourceId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['customerId', 'resourceId'],\n                pathParams: ['customerId', 'resourceId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['customerId', 'resourceId'],\n                pathParams: ['customerId', 'resourceId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/devices/mobile')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['customerId'],\n                pathParams: ['customerId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Mobiledevices = Resource$Mobiledevices;\n    class Resource$Notifications {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/notifications/{notificationId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['customer', 'notificationId'],\n                pathParams: ['customer', 'notificationId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/notifications/{notificationId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['customer', 'notificationId'],\n                pathParams: ['customer', 'notificationId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/notifications')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/notifications/{notificationId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['customer', 'notificationId'],\n                pathParams: ['customer', 'notificationId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/notifications/{notificationId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['customer', 'notificationId'],\n                pathParams: ['customer', 'notificationId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Notifications = Resource$Notifications;\n    class Resource$Orgunits {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/orgunits{/orgUnitPath*}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['customerId', 'orgUnitPath'],\n                pathParams: ['customerId', 'orgUnitPath'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/orgunits{/orgUnitPath*}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['customerId', 'orgUnitPath'],\n                pathParams: ['customerId', 'orgUnitPath'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/orgunits')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['customerId'],\n                pathParams: ['customerId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/orgunits')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['customerId'],\n                pathParams: ['customerId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/orgunits{/orgUnitPath*}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['customerId', 'orgUnitPath'],\n                pathParams: ['customerId', 'orgUnitPath'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/orgunits{/orgUnitPath*}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['customerId', 'orgUnitPath'],\n                pathParams: ['customerId', 'orgUnitPath'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Orgunits = Resource$Orgunits;\n    class Resource$Privileges {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/roles/ALL/privileges')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Privileges = Resource$Privileges;\n    class Resource$Resolvedappaccesssettings {\n        constructor(context) {\n            this.context = context;\n        }\n        GetSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/resolvedappaccesssettings')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        ListTrustedApps(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/trustedapps')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Resolvedappaccesssettings = Resource$Resolvedappaccesssettings;\n    class Resource$Resources {\n        constructor(context) {\n            this.context = context;\n            this.buildings = new Resource$Resources$Buildings(this.context);\n            this.calendars = new Resource$Resources$Calendars(this.context);\n            this.features = new Resource$Resources$Features(this.context);\n        }\n    }\n    admin_directory_v1.Resource$Resources = Resource$Resources;\n    class Resource$Resources$Buildings {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['customer', 'buildingId'],\n                pathParams: ['buildingId', 'customer'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['customer', 'buildingId'],\n                pathParams: ['buildingId', 'customer'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/buildings')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/buildings')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['customer', 'buildingId'],\n                pathParams: ['buildingId', 'customer'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['customer', 'buildingId'],\n                pathParams: ['buildingId', 'customer'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Resources$Buildings = Resource$Resources$Buildings;\n    class Resource$Resources$Calendars {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['customer', 'calendarResourceId'],\n                pathParams: ['calendarResourceId', 'customer'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['customer', 'calendarResourceId'],\n                pathParams: ['calendarResourceId', 'customer'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/calendars')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/calendars')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['customer', 'calendarResourceId'],\n                pathParams: ['calendarResourceId', 'customer'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['customer', 'calendarResourceId'],\n                pathParams: ['calendarResourceId', 'customer'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Resources$Calendars = Resource$Resources$Calendars;\n    class Resource$Resources$Features {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/features/{featureKey}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['customer', 'featureKey'],\n                pathParams: ['customer', 'featureKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/features/{featureKey}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['customer', 'featureKey'],\n                pathParams: ['customer', 'featureKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/features')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/features')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/features/{featureKey}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['customer', 'featureKey'],\n                pathParams: ['customer', 'featureKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        rename(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['customer', 'oldName'],\n                pathParams: ['customer', 'oldName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/resources/features/{featureKey}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['customer', 'featureKey'],\n                pathParams: ['customer', 'featureKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Resources$Features = Resource$Resources$Features;\n    class Resource$Roleassignments {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['customer', 'roleAssignmentId'],\n                pathParams: ['customer', 'roleAssignmentId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['customer', 'roleAssignmentId'],\n                pathParams: ['customer', 'roleAssignmentId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/roleassignments')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/roleassignments')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Roleassignments = Resource$Roleassignments;\n    class Resource$Roles {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/roles/{roleId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['customer', 'roleId'],\n                pathParams: ['customer', 'roleId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/roles/{roleId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['customer', 'roleId'],\n                pathParams: ['customer', 'roleId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/customer/{customer}/roles')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['customer'],\n                pathParams: ['customer'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/roles/{roleId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['customer', 'roleId'],\n                pathParams: ['customer', 'roleId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customer}/roles/{roleId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['customer', 'roleId'],\n                pathParams: ['customer', 'roleId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Roles = Resource$Roles;\n    class Resource$Schemas {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['customerId', 'schemaKey'],\n                pathParams: ['customerId', 'schemaKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['customerId', 'schemaKey'],\n                pathParams: ['customerId', 'schemaKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/schemas')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['customerId'],\n                pathParams: ['customerId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/schemas')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['customerId'],\n                pathParams: ['customerId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['customerId', 'schemaKey'],\n                pathParams: ['customerId', 'schemaKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['customerId', 'schemaKey'],\n                pathParams: ['customerId', 'schemaKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Schemas = Resource$Schemas;\n    class Resource$Tokens {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/users/{userKey}/tokens/{clientId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['userKey', 'clientId'],\n                pathParams: ['clientId', 'userKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/users/{userKey}/tokens/{clientId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['userKey', 'clientId'],\n                pathParams: ['clientId', 'userKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/tokens')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Tokens = Resource$Tokens;\n    class Resource$Users {\n        constructor(context) {\n            this.context = context;\n            this.aliases = new Resource$Users$Aliases(this.context);\n            this.photos = new Resource$Users$Photos(this.context);\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        makeAdmin(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/makeAdmin')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        undelete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/undelete')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        watch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/watch')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Users = Resource$Users;\n    class Resource$Users$Aliases {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/users/{userKey}/aliases/{alias}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['userKey', 'alias'],\n                pathParams: ['alias', 'userKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/aliases')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/admin/directory/v1/users/{userKey}/aliases')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        watch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/users/{userKey}/aliases/watch')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Users$Aliases = Resource$Users$Aliases;\n    class Resource$Users$Photos {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/users/{userKey}/photos/thumbnail')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/users/{userKey}/photos/thumbnail')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/users/{userKey}/photos/thumbnail')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/users/{userKey}/photos/thumbnail')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Users$Photos = Resource$Users$Photos;\n    class Resource$Verificationcodes {\n        constructor(context) {\n            this.context = context;\n        }\n        generate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/users/{userKey}/verificationCodes/generate')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        invalidate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/users/{userKey}/verificationCodes/invalidate')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/admin/directory/v1/users/{userKey}/verificationCodes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['userKey'],\n                pathParams: ['userKey'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    admin_directory_v1.Resource$Verificationcodes = Resource$Verificationcodes;\n})(admin_directory_v1 = exports.admin_directory_v1 || (exports.admin_directory_v1 = {}));\n//# sourceMappingURL=directory_v1.js.map"]},"metadata":{},"sourceType":"script"}