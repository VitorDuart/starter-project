{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _createClass = require(\"/home/vitor/web-projects/starter-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/home/vitor/web-projects/starter-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar googleapis_common_1 = require(\"googleapis-common\"); // tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\n\n\nvar logging_v2;\n\n(function (logging_v2) {\n  /**\n   * Stackdriver Logging API\n   *\n   * Writes log entries and manages your Logging configuration.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const logging = google.logging('v2');\n   *\n   * @namespace logging\n   * @type {Function}\n   * @version v2\n   * @variation v2\n   * @param {object=} options Options for Logging\n   */\n  var Logging = function Logging(options, google) {\n    _classCallCheck(this, Logging);\n\n    this.context = {\n      _options: options || {},\n      google: google\n    };\n    this.billingAccounts = new Resource$Billingaccounts(this.context);\n    this.entries = new Resource$Entries(this.context);\n    this.exclusions = new Resource$Exclusions(this.context);\n    this.folders = new Resource$Folders(this.context);\n    this.logs = new Resource$Logs(this.context);\n    this.monitoredResourceDescriptors = new Resource$Monitoredresourcedescriptors(this.context);\n    this.organizations = new Resource$Organizations(this.context);\n    this.projects = new Resource$Projects(this.context);\n    this.sinks = new Resource$Sinks(this.context);\n  };\n\n  logging_v2.Logging = Logging;\n\n  var Resource$Billingaccounts = function Resource$Billingaccounts(context) {\n    _classCallCheck(this, Resource$Billingaccounts);\n\n    this.context = context;\n    this.exclusions = new Resource$Billingaccounts$Exclusions(this.context);\n    this.logs = new Resource$Billingaccounts$Logs(this.context);\n    this.sinks = new Resource$Billingaccounts$Sinks(this.context);\n  };\n\n  logging_v2.Resource$Billingaccounts = Resource$Billingaccounts;\n\n  var Resource$Billingaccounts$Exclusions = /*#__PURE__*/function () {\n    function Resource$Billingaccounts$Exclusions(context) {\n      _classCallCheck(this, Resource$Billingaccounts$Exclusions);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Billingaccounts$Exclusions, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+parent}/exclusions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+parent}/exclusions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Billingaccounts$Exclusions;\n  }();\n\n  logging_v2.Resource$Billingaccounts$Exclusions = Resource$Billingaccounts$Exclusions;\n\n  var Resource$Billingaccounts$Logs = /*#__PURE__*/function () {\n    function Resource$Billingaccounts$Logs(context) {\n      _classCallCheck(this, Resource$Billingaccounts$Logs);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Billingaccounts$Logs, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+logName}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['logName'],\n          pathParams: ['logName'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+parent}/logs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Billingaccounts$Logs;\n  }();\n\n  logging_v2.Resource$Billingaccounts$Logs = Resource$Billingaccounts$Logs;\n\n  var Resource$Billingaccounts$Sinks = /*#__PURE__*/function () {\n    function Resource$Billingaccounts$Sinks(context) {\n      _classCallCheck(this, Resource$Billingaccounts$Sinks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Billingaccounts$Sinks, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+parent}/sinks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+sinkName}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['sinkName'],\n          pathParams: ['sinkName'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+sinkName}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['sinkName'],\n          pathParams: ['sinkName'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+parent}/sinks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+sinkName}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['sinkName'],\n          pathParams: ['sinkName'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+sinkName}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['sinkName'],\n          pathParams: ['sinkName'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Billingaccounts$Sinks;\n  }();\n\n  logging_v2.Resource$Billingaccounts$Sinks = Resource$Billingaccounts$Sinks;\n\n  var Resource$Entries = /*#__PURE__*/function () {\n    function Resource$Entries(context) {\n      _classCallCheck(this, Resource$Entries);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Entries, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/entries:list').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"write\",\n      value: function write(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/entries:write').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Entries;\n  }();\n\n  logging_v2.Resource$Entries = Resource$Entries;\n\n  var Resource$Exclusions = /*#__PURE__*/function () {\n    function Resource$Exclusions(context) {\n      _classCallCheck(this, Resource$Exclusions);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Exclusions, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+parent}/exclusions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+parent}/exclusions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Exclusions;\n  }();\n\n  logging_v2.Resource$Exclusions = Resource$Exclusions;\n\n  var Resource$Folders = function Resource$Folders(context) {\n    _classCallCheck(this, Resource$Folders);\n\n    this.context = context;\n    this.exclusions = new Resource$Folders$Exclusions(this.context);\n    this.logs = new Resource$Folders$Logs(this.context);\n    this.sinks = new Resource$Folders$Sinks(this.context);\n  };\n\n  logging_v2.Resource$Folders = Resource$Folders;\n\n  var Resource$Folders$Exclusions = /*#__PURE__*/function () {\n    function Resource$Folders$Exclusions(context) {\n      _classCallCheck(this, Resource$Folders$Exclusions);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Folders$Exclusions, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+parent}/exclusions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+parent}/exclusions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Folders$Exclusions;\n  }();\n\n  logging_v2.Resource$Folders$Exclusions = Resource$Folders$Exclusions;\n\n  var Resource$Folders$Logs = /*#__PURE__*/function () {\n    function Resource$Folders$Logs(context) {\n      _classCallCheck(this, Resource$Folders$Logs);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Folders$Logs, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+logName}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['logName'],\n          pathParams: ['logName'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+parent}/logs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Folders$Logs;\n  }();\n\n  logging_v2.Resource$Folders$Logs = Resource$Folders$Logs;\n\n  var Resource$Folders$Sinks = /*#__PURE__*/function () {\n    function Resource$Folders$Sinks(context) {\n      _classCallCheck(this, Resource$Folders$Sinks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Folders$Sinks, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+parent}/sinks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+sinkName}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['sinkName'],\n          pathParams: ['sinkName'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+sinkName}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['sinkName'],\n          pathParams: ['sinkName'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+parent}/sinks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+sinkName}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['sinkName'],\n          pathParams: ['sinkName'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+sinkName}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['sinkName'],\n          pathParams: ['sinkName'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Folders$Sinks;\n  }();\n\n  logging_v2.Resource$Folders$Sinks = Resource$Folders$Sinks;\n\n  var Resource$Logs = /*#__PURE__*/function () {\n    function Resource$Logs(context) {\n      _classCallCheck(this, Resource$Logs);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Logs, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+logName}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['logName'],\n          pathParams: ['logName'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+parent}/logs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Logs;\n  }();\n\n  logging_v2.Resource$Logs = Resource$Logs;\n\n  var Resource$Monitoredresourcedescriptors = /*#__PURE__*/function () {\n    function Resource$Monitoredresourcedescriptors(context) {\n      _classCallCheck(this, Resource$Monitoredresourcedescriptors);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Monitoredresourcedescriptors, [{\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/monitoredResourceDescriptors').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Monitoredresourcedescriptors;\n  }();\n\n  logging_v2.Resource$Monitoredresourcedescriptors = Resource$Monitoredresourcedescriptors;\n\n  var Resource$Organizations = function Resource$Organizations(context) {\n    _classCallCheck(this, Resource$Organizations);\n\n    this.context = context;\n    this.exclusions = new Resource$Organizations$Exclusions(this.context);\n    this.logs = new Resource$Organizations$Logs(this.context);\n    this.sinks = new Resource$Organizations$Sinks(this.context);\n  };\n\n  logging_v2.Resource$Organizations = Resource$Organizations;\n\n  var Resource$Organizations$Exclusions = /*#__PURE__*/function () {\n    function Resource$Organizations$Exclusions(context) {\n      _classCallCheck(this, Resource$Organizations$Exclusions);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Organizations$Exclusions, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+parent}/exclusions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+parent}/exclusions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Organizations$Exclusions;\n  }();\n\n  logging_v2.Resource$Organizations$Exclusions = Resource$Organizations$Exclusions;\n\n  var Resource$Organizations$Logs = /*#__PURE__*/function () {\n    function Resource$Organizations$Logs(context) {\n      _classCallCheck(this, Resource$Organizations$Logs);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Organizations$Logs, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+logName}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['logName'],\n          pathParams: ['logName'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+parent}/logs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Organizations$Logs;\n  }();\n\n  logging_v2.Resource$Organizations$Logs = Resource$Organizations$Logs;\n\n  var Resource$Organizations$Sinks = /*#__PURE__*/function () {\n    function Resource$Organizations$Sinks(context) {\n      _classCallCheck(this, Resource$Organizations$Sinks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Organizations$Sinks, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+parent}/sinks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+sinkName}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['sinkName'],\n          pathParams: ['sinkName'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+sinkName}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['sinkName'],\n          pathParams: ['sinkName'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+parent}/sinks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+sinkName}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['sinkName'],\n          pathParams: ['sinkName'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+sinkName}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['sinkName'],\n          pathParams: ['sinkName'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Organizations$Sinks;\n  }();\n\n  logging_v2.Resource$Organizations$Sinks = Resource$Organizations$Sinks;\n\n  var Resource$Projects = function Resource$Projects(context) {\n    _classCallCheck(this, Resource$Projects);\n\n    this.context = context;\n    this.exclusions = new Resource$Projects$Exclusions(this.context);\n    this.logs = new Resource$Projects$Logs(this.context);\n    this.metrics = new Resource$Projects$Metrics(this.context);\n    this.sinks = new Resource$Projects$Sinks(this.context);\n  };\n\n  logging_v2.Resource$Projects = Resource$Projects;\n\n  var Resource$Projects$Exclusions = /*#__PURE__*/function () {\n    function Resource$Projects$Exclusions(context) {\n      _classCallCheck(this, Resource$Projects$Exclusions);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Exclusions, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+parent}/exclusions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+parent}/exclusions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['name'],\n          pathParams: ['name'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Exclusions;\n  }();\n\n  logging_v2.Resource$Projects$Exclusions = Resource$Projects$Exclusions;\n\n  var Resource$Projects$Logs = /*#__PURE__*/function () {\n    function Resource$Projects$Logs(context) {\n      _classCallCheck(this, Resource$Projects$Logs);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Logs, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+logName}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['logName'],\n          pathParams: ['logName'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+parent}/logs').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Logs;\n  }();\n\n  logging_v2.Resource$Projects$Logs = Resource$Projects$Logs;\n\n  var Resource$Projects$Metrics = /*#__PURE__*/function () {\n    function Resource$Projects$Metrics(context) {\n      _classCallCheck(this, Resource$Projects$Metrics);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Metrics, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+parent}/metrics').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+metricName}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['metricName'],\n          pathParams: ['metricName'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+metricName}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['metricName'],\n          pathParams: ['metricName'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+parent}/metrics').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+metricName}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['metricName'],\n          pathParams: ['metricName'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Metrics;\n  }();\n\n  logging_v2.Resource$Projects$Metrics = Resource$Projects$Metrics;\n\n  var Resource$Projects$Sinks = /*#__PURE__*/function () {\n    function Resource$Projects$Sinks(context) {\n      _classCallCheck(this, Resource$Projects$Sinks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects$Sinks, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+parent}/sinks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+sinkName}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['sinkName'],\n          pathParams: ['sinkName'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+sinkName}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['sinkName'],\n          pathParams: ['sinkName'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+parent}/sinks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+sinkName}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['sinkName'],\n          pathParams: ['sinkName'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+sinkName}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['sinkName'],\n          pathParams: ['sinkName'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects$Sinks;\n  }();\n\n  logging_v2.Resource$Projects$Sinks = Resource$Projects$Sinks;\n\n  var Resource$Sinks = /*#__PURE__*/function () {\n    function Resource$Sinks(context) {\n      _classCallCheck(this, Resource$Sinks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Sinks, [{\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+parent}/sinks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+sinkName}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['sinkName'],\n          pathParams: ['sinkName'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+sinkName}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['sinkName'],\n          pathParams: ['sinkName'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+parent}/sinks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['parent'],\n          pathParams: ['parent'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v2/{+sinkName}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['sinkName'],\n          pathParams: ['sinkName'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Sinks;\n  }();\n\n  logging_v2.Resource$Sinks = Resource$Sinks;\n})(logging_v2 = exports.logging_v2 || (exports.logging_v2 = {}));","map":{"version":3,"sources":["/home/vitor/web-projects/starter-project/node_modules/googleapis/build/src/apis/logging/v2.js"],"names":["Object","defineProperty","exports","value","googleapis_common_1","require","logging_v2","Logging","options","google","context","_options","billingAccounts","Resource$Billingaccounts","entries","Resource$Entries","exclusions","Resource$Exclusions","folders","Resource$Folders","logs","Resource$Logs","monitoredResourceDescriptors","Resource$Monitoredresourcedescriptors","organizations","Resource$Organizations","projects","Resource$Projects","sinks","Resource$Sinks","Resource$Billingaccounts$Exclusions","Resource$Billingaccounts$Logs","Resource$Billingaccounts$Sinks","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","Resource$Folders$Exclusions","Resource$Folders$Logs","Resource$Folders$Sinks","Resource$Organizations$Exclusions","Resource$Organizations$Logs","Resource$Organizations$Sinks","Resource$Projects$Exclusions","Resource$Projects$Logs","metrics","Resource$Projects$Metrics","Resource$Projects$Sinks"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst googleapis_common_1 = require(\"googleapis-common\");\n// tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\nvar logging_v2;\n(function (logging_v2) {\n    /**\n     * Stackdriver Logging API\n     *\n     * Writes log entries and manages your Logging configuration.\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const logging = google.logging('v2');\n     *\n     * @namespace logging\n     * @type {Function}\n     * @version v2\n     * @variation v2\n     * @param {object=} options Options for Logging\n     */\n    class Logging {\n        constructor(options, google) {\n            this.context = { _options: options || {}, google };\n            this.billingAccounts = new Resource$Billingaccounts(this.context);\n            this.entries = new Resource$Entries(this.context);\n            this.exclusions = new Resource$Exclusions(this.context);\n            this.folders = new Resource$Folders(this.context);\n            this.logs = new Resource$Logs(this.context);\n            this.monitoredResourceDescriptors =\n                new Resource$Monitoredresourcedescriptors(this.context);\n            this.organizations = new Resource$Organizations(this.context);\n            this.projects = new Resource$Projects(this.context);\n            this.sinks = new Resource$Sinks(this.context);\n        }\n    }\n    logging_v2.Logging = Logging;\n    class Resource$Billingaccounts {\n        constructor(context) {\n            this.context = context;\n            this.exclusions = new Resource$Billingaccounts$Exclusions(this.context);\n            this.logs = new Resource$Billingaccounts$Logs(this.context);\n            this.sinks = new Resource$Billingaccounts$Sinks(this.context);\n        }\n    }\n    logging_v2.Resource$Billingaccounts = Resource$Billingaccounts;\n    class Resource$Billingaccounts$Exclusions {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/exclusions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/exclusions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    logging_v2.Resource$Billingaccounts$Exclusions = Resource$Billingaccounts$Exclusions;\n    class Resource$Billingaccounts$Logs {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+logName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['logName'],\n                pathParams: ['logName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/logs')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    logging_v2.Resource$Billingaccounts$Logs = Resource$Billingaccounts$Logs;\n    class Resource$Billingaccounts$Sinks {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/sinks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+sinkName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['sinkName'],\n                pathParams: ['sinkName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+sinkName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['sinkName'],\n                pathParams: ['sinkName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/sinks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+sinkName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['sinkName'],\n                pathParams: ['sinkName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+sinkName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['sinkName'],\n                pathParams: ['sinkName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    logging_v2.Resource$Billingaccounts$Sinks = Resource$Billingaccounts$Sinks;\n    class Resource$Entries {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/entries:list').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        write(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/entries:write').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    logging_v2.Resource$Entries = Resource$Entries;\n    class Resource$Exclusions {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/exclusions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/exclusions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    logging_v2.Resource$Exclusions = Resource$Exclusions;\n    class Resource$Folders {\n        constructor(context) {\n            this.context = context;\n            this.exclusions = new Resource$Folders$Exclusions(this.context);\n            this.logs = new Resource$Folders$Logs(this.context);\n            this.sinks = new Resource$Folders$Sinks(this.context);\n        }\n    }\n    logging_v2.Resource$Folders = Resource$Folders;\n    class Resource$Folders$Exclusions {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/exclusions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/exclusions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    logging_v2.Resource$Folders$Exclusions = Resource$Folders$Exclusions;\n    class Resource$Folders$Logs {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+logName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['logName'],\n                pathParams: ['logName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/logs')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    logging_v2.Resource$Folders$Logs = Resource$Folders$Logs;\n    class Resource$Folders$Sinks {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/sinks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+sinkName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['sinkName'],\n                pathParams: ['sinkName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+sinkName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['sinkName'],\n                pathParams: ['sinkName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/sinks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+sinkName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['sinkName'],\n                pathParams: ['sinkName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+sinkName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['sinkName'],\n                pathParams: ['sinkName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    logging_v2.Resource$Folders$Sinks = Resource$Folders$Sinks;\n    class Resource$Logs {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+logName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['logName'],\n                pathParams: ['logName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/logs')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    logging_v2.Resource$Logs = Resource$Logs;\n    class Resource$Monitoredresourcedescriptors {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/monitoredResourceDescriptors')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    logging_v2.Resource$Monitoredresourcedescriptors = Resource$Monitoredresourcedescriptors;\n    class Resource$Organizations {\n        constructor(context) {\n            this.context = context;\n            this.exclusions = new Resource$Organizations$Exclusions(this.context);\n            this.logs = new Resource$Organizations$Logs(this.context);\n            this.sinks = new Resource$Organizations$Sinks(this.context);\n        }\n    }\n    logging_v2.Resource$Organizations = Resource$Organizations;\n    class Resource$Organizations$Exclusions {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/exclusions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/exclusions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    logging_v2.Resource$Organizations$Exclusions = Resource$Organizations$Exclusions;\n    class Resource$Organizations$Logs {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+logName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['logName'],\n                pathParams: ['logName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/logs')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    logging_v2.Resource$Organizations$Logs = Resource$Organizations$Logs;\n    class Resource$Organizations$Sinks {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/sinks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+sinkName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['sinkName'],\n                pathParams: ['sinkName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+sinkName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['sinkName'],\n                pathParams: ['sinkName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/sinks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+sinkName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['sinkName'],\n                pathParams: ['sinkName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+sinkName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['sinkName'],\n                pathParams: ['sinkName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    logging_v2.Resource$Organizations$Sinks = Resource$Organizations$Sinks;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n            this.exclusions = new Resource$Projects$Exclusions(this.context);\n            this.logs = new Resource$Projects$Logs(this.context);\n            this.metrics = new Resource$Projects$Metrics(this.context);\n            this.sinks = new Resource$Projects$Sinks(this.context);\n        }\n    }\n    logging_v2.Resource$Projects = Resource$Projects;\n    class Resource$Projects$Exclusions {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/exclusions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/exclusions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    logging_v2.Resource$Projects$Exclusions = Resource$Projects$Exclusions;\n    class Resource$Projects$Logs {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+logName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['logName'],\n                pathParams: ['logName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/logs')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    logging_v2.Resource$Projects$Logs = Resource$Projects$Logs;\n    class Resource$Projects$Metrics {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/metrics')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+metricName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['metricName'],\n                pathParams: ['metricName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+metricName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['metricName'],\n                pathParams: ['metricName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/metrics')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+metricName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['metricName'],\n                pathParams: ['metricName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    logging_v2.Resource$Projects$Metrics = Resource$Projects$Metrics;\n    class Resource$Projects$Sinks {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/sinks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+sinkName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['sinkName'],\n                pathParams: ['sinkName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+sinkName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['sinkName'],\n                pathParams: ['sinkName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/sinks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+sinkName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['sinkName'],\n                pathParams: ['sinkName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+sinkName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['sinkName'],\n                pathParams: ['sinkName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    logging_v2.Resource$Projects$Sinks = Resource$Projects$Sinks;\n    class Resource$Sinks {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/sinks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+sinkName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['sinkName'],\n                pathParams: ['sinkName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+sinkName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['sinkName'],\n                pathParams: ['sinkName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/sinks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://logging.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+sinkName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['sinkName'],\n                pathParams: ['sinkName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    logging_v2.Resource$Sinks = Resource$Sinks;\n})(logging_v2 = exports.logging_v2 || (exports.logging_v2 = {}));\n//# sourceMappingURL=v2.js.map"]},"metadata":{},"sourceType":"script"}