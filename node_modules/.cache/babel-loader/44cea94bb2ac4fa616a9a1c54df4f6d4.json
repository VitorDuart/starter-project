{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _createClass = require(\"/home/vitor/web-projects/starter-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/home/vitor/web-projects/starter-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar googleapis_common_1 = require(\"googleapis-common\"); // tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\n\n\nvar compute_v1;\n\n(function (compute_v1) {\n  /**\n   * Compute Engine API\n   *\n   * Creates and runs virtual machines on Google Cloud Platform.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const compute = google.compute('v1');\n   *\n   * @namespace compute\n   * @type {Function}\n   * @version v1\n   * @variation v1\n   * @param {object=} options Options for Compute\n   */\n  var Compute = function Compute(options, google) {\n    _classCallCheck(this, Compute);\n\n    this.context = {\n      _options: options || {},\n      google: google\n    };\n    this.acceleratorTypes = new Resource$Acceleratortypes(this.context);\n    this.addresses = new Resource$Addresses(this.context);\n    this.autoscalers = new Resource$Autoscalers(this.context);\n    this.backendBuckets = new Resource$Backendbuckets(this.context);\n    this.backendServices = new Resource$Backendservices(this.context);\n    this.disks = new Resource$Disks(this.context);\n    this.diskTypes = new Resource$Disktypes(this.context);\n    this.firewalls = new Resource$Firewalls(this.context);\n    this.forwardingRules = new Resource$Forwardingrules(this.context);\n    this.globalAddresses = new Resource$Globaladdresses(this.context);\n    this.globalForwardingRules = new Resource$Globalforwardingrules(this.context);\n    this.globalOperations = new Resource$Globaloperations(this.context);\n    this.healthChecks = new Resource$Healthchecks(this.context);\n    this.httpHealthChecks = new Resource$Httphealthchecks(this.context);\n    this.httpsHealthChecks = new Resource$Httpshealthchecks(this.context);\n    this.images = new Resource$Images(this.context);\n    this.instanceGroupManagers = new Resource$Instancegroupmanagers(this.context);\n    this.instanceGroups = new Resource$Instancegroups(this.context);\n    this.instances = new Resource$Instances(this.context);\n    this.instanceTemplates = new Resource$Instancetemplates(this.context);\n    this.interconnectAttachments = new Resource$Interconnectattachments(this.context);\n    this.interconnectLocations = new Resource$Interconnectlocations(this.context);\n    this.interconnects = new Resource$Interconnects(this.context);\n    this.licenseCodes = new Resource$Licensecodes(this.context);\n    this.licenses = new Resource$Licenses(this.context);\n    this.machineTypes = new Resource$Machinetypes(this.context);\n    this.networkEndpointGroups = new Resource$Networkendpointgroups(this.context);\n    this.networks = new Resource$Networks(this.context);\n    this.nodeGroups = new Resource$Nodegroups(this.context);\n    this.nodeTemplates = new Resource$Nodetemplates(this.context);\n    this.nodeTypes = new Resource$Nodetypes(this.context);\n    this.projects = new Resource$Projects(this.context);\n    this.regionAutoscalers = new Resource$Regionautoscalers(this.context);\n    this.regionBackendServices = new Resource$Regionbackendservices(this.context);\n    this.regionCommitments = new Resource$Regioncommitments(this.context);\n    this.regionDisks = new Resource$Regiondisks(this.context);\n    this.regionDiskTypes = new Resource$Regiondisktypes(this.context);\n    this.regionInstanceGroupManagers = new Resource$Regioninstancegroupmanagers(this.context);\n    this.regionInstanceGroups = new Resource$Regioninstancegroups(this.context);\n    this.regionOperations = new Resource$Regionoperations(this.context);\n    this.regions = new Resource$Regions(this.context);\n    this.routers = new Resource$Routers(this.context);\n    this.routes = new Resource$Routes(this.context);\n    this.securityPolicies = new Resource$Securitypolicies(this.context);\n    this.snapshots = new Resource$Snapshots(this.context);\n    this.sslCertificates = new Resource$Sslcertificates(this.context);\n    this.sslPolicies = new Resource$Sslpolicies(this.context);\n    this.subnetworks = new Resource$Subnetworks(this.context);\n    this.targetHttpProxies = new Resource$Targethttpproxies(this.context);\n    this.targetHttpsProxies = new Resource$Targethttpsproxies(this.context);\n    this.targetInstances = new Resource$Targetinstances(this.context);\n    this.targetPools = new Resource$Targetpools(this.context);\n    this.targetSslProxies = new Resource$Targetsslproxies(this.context);\n    this.targetTcpProxies = new Resource$Targettcpproxies(this.context);\n    this.targetVpnGateways = new Resource$Targetvpngateways(this.context);\n    this.urlMaps = new Resource$Urlmaps(this.context);\n    this.vpnTunnels = new Resource$Vpntunnels(this.context);\n    this.zoneOperations = new Resource$Zoneoperations(this.context);\n    this.zones = new Resource$Zones(this.context);\n  };\n\n  compute_v1.Compute = Compute;\n\n  var Resource$Acceleratortypes = /*#__PURE__*/function () {\n    function Resource$Acceleratortypes(context) {\n      _classCallCheck(this, Resource$Acceleratortypes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Acceleratortypes, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/acceleratorTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/acceleratorTypes/{acceleratorType}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'acceleratorType'],\n          pathParams: ['acceleratorType', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/acceleratorTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Acceleratortypes;\n  }();\n\n  compute_v1.Resource$Acceleratortypes = Resource$Acceleratortypes;\n\n  var Resource$Addresses = /*#__PURE__*/function () {\n    function Resource$Addresses(context) {\n      _classCallCheck(this, Resource$Addresses);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Addresses, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'address'],\n          pathParams: ['address', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'address'],\n          pathParams: ['address', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Addresses;\n  }();\n\n  compute_v1.Resource$Addresses = Resource$Addresses;\n\n  var Resource$Autoscalers = /*#__PURE__*/function () {\n    function Resource$Autoscalers(context) {\n      _classCallCheck(this, Resource$Autoscalers);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Autoscalers, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'autoscaler'],\n          pathParams: ['autoscaler', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'autoscaler'],\n          pathParams: ['autoscaler', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Autoscalers;\n  }();\n\n  compute_v1.Resource$Autoscalers = Resource$Autoscalers;\n\n  var Resource$Backendbuckets = /*#__PURE__*/function () {\n    function Resource$Backendbuckets(context) {\n      _classCallCheck(this, Resource$Backendbuckets);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Backendbuckets, [{\n      key: \"addSignedUrlKey\",\n      value: function addSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/backendBuckets/{backendBucket}/addSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'backendBucket'],\n          pathParams: ['backendBucket', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'backendBucket'],\n          pathParams: ['backendBucket', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deleteSignedUrlKey\",\n      value: function deleteSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/backendBuckets/{backendBucket}/deleteSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'backendBucket', 'keyName'],\n          pathParams: ['backendBucket', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'backendBucket'],\n          pathParams: ['backendBucket', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/backendBuckets').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/backendBuckets').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'backendBucket'],\n          pathParams: ['backendBucket', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'backendBucket'],\n          pathParams: ['backendBucket', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Backendbuckets;\n  }();\n\n  compute_v1.Resource$Backendbuckets = Resource$Backendbuckets;\n\n  var Resource$Backendservices = /*#__PURE__*/function () {\n    function Resource$Backendservices(context) {\n      _classCallCheck(this, Resource$Backendservices);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Backendservices, [{\n      key: \"addSignedUrlKey\",\n      value: function addSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/backendServices/{backendService}/addSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'backendService'],\n          pathParams: ['backendService', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'backendService'],\n          pathParams: ['backendService', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deleteSignedUrlKey\",\n      value: function deleteSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/backendServices/{backendService}/deleteSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'backendService', 'keyName'],\n          pathParams: ['backendService', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'backendService'],\n          pathParams: ['backendService', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getHealth\",\n      value: function getHealth(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/backendServices/{backendService}/getHealth').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'backendService'],\n          pathParams: ['backendService', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'backendService'],\n          pathParams: ['backendService', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setSecurityPolicy\",\n      value: function setSecurityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/backendServices/{backendService}/setSecurityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'backendService'],\n          pathParams: ['backendService', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'backendService'],\n          pathParams: ['backendService', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Backendservices;\n  }();\n\n  compute_v1.Resource$Backendservices = Resource$Backendservices;\n\n  var Resource$Disks = /*#__PURE__*/function () {\n    function Resource$Disks(context) {\n      _classCallCheck(this, Resource$Disks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Disks, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"createSnapshot\",\n      value: function createSnapshot(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/disks/{disk}/createSnapshot').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'disk'],\n          pathParams: ['disk', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'disk'],\n          pathParams: ['disk', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'disk'],\n          pathParams: ['disk', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/disks/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"resize\",\n      value: function resize(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/disks/{disk}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'disk'],\n          pathParams: ['disk', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/disks/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/disks/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/disks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Disks;\n  }();\n\n  compute_v1.Resource$Disks = Resource$Disks;\n\n  var Resource$Disktypes = /*#__PURE__*/function () {\n    function Resource$Disktypes(context) {\n      _classCallCheck(this, Resource$Disktypes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Disktypes, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/diskTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/diskTypes/{diskType}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'diskType'],\n          pathParams: ['diskType', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/diskTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Disktypes;\n  }();\n\n  compute_v1.Resource$Disktypes = Resource$Disktypes;\n\n  var Resource$Firewalls = /*#__PURE__*/function () {\n    function Resource$Firewalls(context) {\n      _classCallCheck(this, Resource$Firewalls);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Firewalls, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'firewall'],\n          pathParams: ['firewall', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'firewall'],\n          pathParams: ['firewall', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/firewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/firewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'firewall'],\n          pathParams: ['firewall', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'firewall'],\n          pathParams: ['firewall', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Firewalls;\n  }();\n\n  compute_v1.Resource$Firewalls = Resource$Firewalls;\n\n  var Resource$Forwardingrules = /*#__PURE__*/function () {\n    function Resource$Forwardingrules(context) {\n      _classCallCheck(this, Resource$Forwardingrules);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Forwardingrules, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'forwardingRule'],\n          pathParams: ['forwardingRule', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'forwardingRule'],\n          pathParams: ['forwardingRule', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setTarget\",\n      value: function setTarget(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}/setTarget').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'forwardingRule'],\n          pathParams: ['forwardingRule', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Forwardingrules;\n  }();\n\n  compute_v1.Resource$Forwardingrules = Resource$Forwardingrules;\n\n  var Resource$Globaladdresses = /*#__PURE__*/function () {\n    function Resource$Globaladdresses(context) {\n      _classCallCheck(this, Resource$Globaladdresses);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Globaladdresses, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'address'],\n          pathParams: ['address', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'address'],\n          pathParams: ['address', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Globaladdresses;\n  }();\n\n  compute_v1.Resource$Globaladdresses = Resource$Globaladdresses;\n\n  var Resource$Globalforwardingrules = /*#__PURE__*/function () {\n    function Resource$Globalforwardingrules(context) {\n      _classCallCheck(this, Resource$Globalforwardingrules);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Globalforwardingrules, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'forwardingRule'],\n          pathParams: ['forwardingRule', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'forwardingRule'],\n          pathParams: ['forwardingRule', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setTarget\",\n      value: function setTarget(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/forwardingRules/{forwardingRule}/setTarget').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'forwardingRule'],\n          pathParams: ['forwardingRule', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Globalforwardingrules;\n  }();\n\n  compute_v1.Resource$Globalforwardingrules = Resource$Globalforwardingrules;\n\n  var Resource$Globaloperations = /*#__PURE__*/function () {\n    function Resource$Globaloperations(context) {\n      _classCallCheck(this, Resource$Globaloperations);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Globaloperations, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'operation'],\n          pathParams: ['operation', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'operation'],\n          pathParams: ['operation', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Globaloperations;\n  }();\n\n  compute_v1.Resource$Globaloperations = Resource$Globaloperations;\n\n  var Resource$Healthchecks = /*#__PURE__*/function () {\n    function Resource$Healthchecks(context) {\n      _classCallCheck(this, Resource$Healthchecks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Healthchecks, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'healthCheck'],\n          pathParams: ['healthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'healthCheck'],\n          pathParams: ['healthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'healthCheck'],\n          pathParams: ['healthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'healthCheck'],\n          pathParams: ['healthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Healthchecks;\n  }();\n\n  compute_v1.Resource$Healthchecks = Resource$Healthchecks;\n\n  var Resource$Httphealthchecks = /*#__PURE__*/function () {\n    function Resource$Httphealthchecks(context) {\n      _classCallCheck(this, Resource$Httphealthchecks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Httphealthchecks, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'httpHealthCheck'],\n          pathParams: ['httpHealthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'httpHealthCheck'],\n          pathParams: ['httpHealthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/httpHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/httpHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'httpHealthCheck'],\n          pathParams: ['httpHealthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'httpHealthCheck'],\n          pathParams: ['httpHealthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Httphealthchecks;\n  }();\n\n  compute_v1.Resource$Httphealthchecks = Resource$Httphealthchecks;\n\n  var Resource$Httpshealthchecks = /*#__PURE__*/function () {\n    function Resource$Httpshealthchecks(context) {\n      _classCallCheck(this, Resource$Httpshealthchecks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Httpshealthchecks, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'httpsHealthCheck'],\n          pathParams: ['httpsHealthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'httpsHealthCheck'],\n          pathParams: ['httpsHealthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/httpsHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/httpsHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'httpsHealthCheck'],\n          pathParams: ['httpsHealthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'httpsHealthCheck'],\n          pathParams: ['httpsHealthCheck', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Httpshealthchecks;\n  }();\n\n  compute_v1.Resource$Httpshealthchecks = Resource$Httpshealthchecks;\n\n  var Resource$Images = /*#__PURE__*/function () {\n    function Resource$Images(context) {\n      _classCallCheck(this, Resource$Images);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Images, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/images/{image}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'image'],\n          pathParams: ['image', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deprecate\",\n      value: function deprecate(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/images/{image}/deprecate').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'image'],\n          pathParams: ['image', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/images/{image}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'image'],\n          pathParams: ['image', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getFromFamily\",\n      value: function getFromFamily(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/images/family/{family}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'family'],\n          pathParams: ['family', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/images/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/images').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/images').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/images/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/images/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/images/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Images;\n  }();\n\n  compute_v1.Resource$Images = Resource$Images;\n\n  var Resource$Instancegroupmanagers = /*#__PURE__*/function () {\n    function Resource$Instancegroupmanagers(context) {\n      _classCallCheck(this, Resource$Instancegroupmanagers);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Instancegroupmanagers, [{\n      key: \"abandonInstances\",\n      value: function abandonInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/abandonInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deleteInstances\",\n      value: function deleteInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/deleteInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listManagedInstances\",\n      value: function listManagedInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"recreateInstances\",\n      value: function recreateInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/recreateInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"resize\",\n      value: function resize(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager', 'size'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setInstanceTemplate\",\n      value: function setInstanceTemplate(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setTargetPools\",\n      value: function setTargetPools(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setTargetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Instancegroupmanagers;\n  }();\n\n  compute_v1.Resource$Instancegroupmanagers = Resource$Instancegroupmanagers;\n\n  var Resource$Instancegroups = /*#__PURE__*/function () {\n    function Resource$Instancegroups(context) {\n      _classCallCheck(this, Resource$Instancegroups);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Instancegroups, [{\n      key: \"addInstances\",\n      value: function addInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/addInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listInstances\",\n      value: function listInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/listInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"removeInstances\",\n      value: function removeInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/removeInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setNamedPorts\",\n      value: function setNamedPorts(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/setNamedPorts').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Instancegroups;\n  }();\n\n  compute_v1.Resource$Instancegroups = Resource$Instancegroups;\n\n  var Resource$Instances = /*#__PURE__*/function () {\n    function Resource$Instances(context) {\n      _classCallCheck(this, Resource$Instances);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Instances, [{\n      key: \"addAccessConfig\",\n      value: function addAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/addAccessConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"attachDisk\",\n      value: function attachDisk(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/attachDisk').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deleteAccessConfig\",\n      value: function deleteAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/deleteAccessConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instance', 'accessConfig', 'networkInterface'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"detachDisk\",\n      value: function detachDisk(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/detachDisk').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instance', 'deviceName'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getSerialPortOutput\",\n      value: function getSerialPortOutput(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/serialPort').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getShieldedInstanceIdentity\",\n      value: function getShieldedInstanceIdentity(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/getShieldedInstanceIdentity').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listReferrers\",\n      value: function listReferrers(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/referrers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"reset\",\n      value: function reset(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/reset').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setDeletionProtection\",\n      value: function setDeletionProtection(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{resource}/setDeletionProtection').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setDiskAutoDelete\",\n      value: function setDiskAutoDelete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setDiskAutoDelete').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instance', 'autoDelete', 'deviceName'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setMachineResources\",\n      value: function setMachineResources(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setMachineResources').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setMachineType\",\n      value: function setMachineType(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setMachineType').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setMetadata\",\n      value: function setMetadata(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setMetadata').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setMinCpuPlatform\",\n      value: function setMinCpuPlatform(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setMinCpuPlatform').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setScheduling\",\n      value: function setScheduling(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setScheduling').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setServiceAccount\",\n      value: function setServiceAccount(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setServiceAccount').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setShieldedInstanceIntegrityPolicy\",\n      value: function setShieldedInstanceIntegrityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setShieldedInstanceIntegrityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setTags\",\n      value: function setTags(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setTags').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"simulateMaintenanceEvent\",\n      value: function simulateMaintenanceEvent(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/simulateMaintenanceEvent').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"start\",\n      value: function start(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/start').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"startWithEncryptionKey\",\n      value: function startWithEncryptionKey(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/startWithEncryptionKey').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"stop\",\n      value: function stop(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/stop').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"updateAccessConfig\",\n      value: function updateAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"updateNetworkInterface\",\n      value: function updateNetworkInterface(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/updateNetworkInterface').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"updateShieldedInstanceConfig\",\n      value: function updateShieldedInstanceConfig(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/updateShieldedInstanceConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'instance'],\n          pathParams: ['instance', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Instances;\n  }();\n\n  compute_v1.Resource$Instances = Resource$Instances;\n\n  var Resource$Instancetemplates = /*#__PURE__*/function () {\n    function Resource$Instancetemplates(context) {\n      _classCallCheck(this, Resource$Instancetemplates);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Instancetemplates, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/instanceTemplates/{instanceTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'instanceTemplate'],\n          pathParams: ['instanceTemplate', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/instanceTemplates/{instanceTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'instanceTemplate'],\n          pathParams: ['instanceTemplate', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/instanceTemplates/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/instanceTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/instanceTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/instanceTemplates/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/instanceTemplates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Instancetemplates;\n  }();\n\n  compute_v1.Resource$Instancetemplates = Resource$Instancetemplates;\n\n  var Resource$Interconnectattachments = /*#__PURE__*/function () {\n    function Resource$Interconnectattachments(context) {\n      _classCallCheck(this, Resource$Interconnectattachments);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Interconnectattachments, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/interconnectAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'interconnectAttachment'],\n          pathParams: ['interconnectAttachment', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'interconnectAttachment'],\n          pathParams: ['interconnectAttachment', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/interconnectAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/interconnectAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'interconnectAttachment'],\n          pathParams: ['interconnectAttachment', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Interconnectattachments;\n  }();\n\n  compute_v1.Resource$Interconnectattachments = Resource$Interconnectattachments;\n\n  var Resource$Interconnectlocations = /*#__PURE__*/function () {\n    function Resource$Interconnectlocations(context) {\n      _classCallCheck(this, Resource$Interconnectlocations);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Interconnectlocations, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/interconnectLocations/{interconnectLocation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'interconnectLocation'],\n          pathParams: ['interconnectLocation', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/interconnectLocations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Interconnectlocations;\n  }();\n\n  compute_v1.Resource$Interconnectlocations = Resource$Interconnectlocations;\n\n  var Resource$Interconnects = /*#__PURE__*/function () {\n    function Resource$Interconnects(context) {\n      _classCallCheck(this, Resource$Interconnects);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Interconnects, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/interconnects/{interconnect}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'interconnect'],\n          pathParams: ['interconnect', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/interconnects/{interconnect}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'interconnect'],\n          pathParams: ['interconnect', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getDiagnostics\",\n      value: function getDiagnostics(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/interconnects/{interconnect}/getDiagnostics').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'interconnect'],\n          pathParams: ['interconnect', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/interconnects').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/interconnects').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/interconnects/{interconnect}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'interconnect'],\n          pathParams: ['interconnect', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Interconnects;\n  }();\n\n  compute_v1.Resource$Interconnects = Resource$Interconnects;\n\n  var Resource$Licensecodes = /*#__PURE__*/function () {\n    function Resource$Licensecodes(context) {\n      _classCallCheck(this, Resource$Licensecodes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Licensecodes, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/licenseCodes/{licenseCode}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'licenseCode'],\n          pathParams: ['licenseCode', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/licenseCodes/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Licensecodes;\n  }();\n\n  compute_v1.Resource$Licensecodes = Resource$Licensecodes;\n\n  var Resource$Licenses = /*#__PURE__*/function () {\n    function Resource$Licenses(context) {\n      _classCallCheck(this, Resource$Licenses);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Licenses, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/licenses/{license}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'license'],\n          pathParams: ['license', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/licenses/{license}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'license'],\n          pathParams: ['license', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/licenses/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/licenses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/licenses').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/licenses/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/licenses/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Licenses;\n  }();\n\n  compute_v1.Resource$Licenses = Resource$Licenses;\n\n  var Resource$Machinetypes = /*#__PURE__*/function () {\n    function Resource$Machinetypes(context) {\n      _classCallCheck(this, Resource$Machinetypes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Machinetypes, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/machineTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/machineTypes/{machineType}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'machineType'],\n          pathParams: ['machineType', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/machineTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Machinetypes;\n  }();\n\n  compute_v1.Resource$Machinetypes = Resource$Machinetypes;\n\n  var Resource$Networkendpointgroups = /*#__PURE__*/function () {\n    function Resource$Networkendpointgroups(context) {\n      _classCallCheck(this, Resource$Networkendpointgroups);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Networkendpointgroups, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"attachNetworkEndpoints\",\n      value: function attachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n          pathParams: ['networkEndpointGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n          pathParams: ['networkEndpointGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"detachNetworkEndpoints\",\n      value: function detachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n          pathParams: ['networkEndpointGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n          pathParams: ['networkEndpointGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listNetworkEndpoints\",\n      value: function listNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n          pathParams: ['networkEndpointGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/networkEndpointGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Networkendpointgroups;\n  }();\n\n  compute_v1.Resource$Networkendpointgroups = Resource$Networkendpointgroups;\n\n  var Resource$Networks = /*#__PURE__*/function () {\n    function Resource$Networks(context) {\n      _classCallCheck(this, Resource$Networks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Networks, [{\n      key: \"addPeering\",\n      value: function addPeering(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/networks/{network}/addPeering').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'network'],\n          pathParams: ['network', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/networks/{network}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'network'],\n          pathParams: ['network', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/networks/{network}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'network'],\n          pathParams: ['network', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/networks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/networks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/networks/{network}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'network'],\n          pathParams: ['network', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"removePeering\",\n      value: function removePeering(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/networks/{network}/removePeering').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'network'],\n          pathParams: ['network', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"switchToCustomMode\",\n      value: function switchToCustomMode(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/networks/{network}/switchToCustomMode').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'network'],\n          pathParams: ['network', 'project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Networks;\n  }();\n\n  compute_v1.Resource$Networks = Resource$Networks;\n\n  var Resource$Nodegroups = /*#__PURE__*/function () {\n    function Resource$Nodegroups(context) {\n      _classCallCheck(this, Resource$Nodegroups);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Nodegroups, [{\n      key: \"addNodes\",\n      value: function addNodes(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/addNodes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'nodeGroup'],\n          pathParams: ['nodeGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/nodeGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'nodeGroup'],\n          pathParams: ['nodeGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deleteNodes\",\n      value: function deleteNodes(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/deleteNodes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'nodeGroup'],\n          pathParams: ['nodeGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'nodeGroup'],\n          pathParams: ['nodeGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/nodeGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'initialNodeCount'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/nodeGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listNodes\",\n      value: function listNodes(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/listNodes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'nodeGroup'],\n          pathParams: ['nodeGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setNodeTemplate\",\n      value: function setNodeTemplate(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/setNodeTemplate').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'nodeGroup'],\n          pathParams: ['nodeGroup', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'resource'],\n          pathParams: ['project', 'resource', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Nodegroups;\n  }();\n\n  compute_v1.Resource$Nodegroups = Resource$Nodegroups;\n\n  var Resource$Nodetemplates = /*#__PURE__*/function () {\n    function Resource$Nodetemplates(context) {\n      _classCallCheck(this, Resource$Nodetemplates);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Nodetemplates, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/nodeTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'nodeTemplate'],\n          pathParams: ['nodeTemplate', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'nodeTemplate'],\n          pathParams: ['nodeTemplate', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/nodeTemplates/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/nodeTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/nodeTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/nodeTemplates/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/nodeTemplates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Nodetemplates;\n  }();\n\n  compute_v1.Resource$Nodetemplates = Resource$Nodetemplates;\n\n  var Resource$Nodetypes = /*#__PURE__*/function () {\n    function Resource$Nodetypes(context) {\n      _classCallCheck(this, Resource$Nodetypes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Nodetypes, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/nodeTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/nodeTypes/{nodeType}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'nodeType'],\n          pathParams: ['nodeType', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/nodeTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Nodetypes;\n  }();\n\n  compute_v1.Resource$Nodetypes = Resource$Nodetypes;\n\n  var Resource$Projects = /*#__PURE__*/function () {\n    function Resource$Projects(context) {\n      _classCallCheck(this, Resource$Projects);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Projects, [{\n      key: \"disableXpnHost\",\n      value: function disableXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/disableXpnHost').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"disableXpnResource\",\n      value: function disableXpnResource(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/disableXpnResource').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"enableXpnHost\",\n      value: function enableXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/enableXpnHost').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"enableXpnResource\",\n      value: function enableXpnResource(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/enableXpnResource').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getXpnHost\",\n      value: function getXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/getXpnHost').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getXpnResources\",\n      value: function getXpnResources(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/getXpnResources').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listXpnHosts\",\n      value: function listXpnHosts(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/listXpnHosts').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"moveDisk\",\n      value: function moveDisk(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/moveDisk').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"moveInstance\",\n      value: function moveInstance(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/moveInstance').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setCommonInstanceMetadata\",\n      value: function setCommonInstanceMetadata(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/setCommonInstanceMetadata').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setDefaultNetworkTier\",\n      value: function setDefaultNetworkTier(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/setDefaultNetworkTier').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setUsageExportBucket\",\n      value: function setUsageExportBucket(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/setUsageExportBucket').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Projects;\n  }();\n\n  compute_v1.Resource$Projects = Resource$Projects;\n\n  var Resource$Regionautoscalers = /*#__PURE__*/function () {\n    function Resource$Regionautoscalers(context) {\n      _classCallCheck(this, Resource$Regionautoscalers);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regionautoscalers, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'autoscaler'],\n          pathParams: ['autoscaler', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'autoscaler'],\n          pathParams: ['autoscaler', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regionautoscalers;\n  }();\n\n  compute_v1.Resource$Regionautoscalers = Resource$Regionautoscalers;\n\n  var Resource$Regionbackendservices = /*#__PURE__*/function () {\n    function Resource$Regionbackendservices(context) {\n      _classCallCheck(this, Resource$Regionbackendservices);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regionbackendservices, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'backendService'],\n          pathParams: ['backendService', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'backendService'],\n          pathParams: ['backendService', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getHealth\",\n      value: function getHealth(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/backendServices/{backendService}/getHealth').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'backendService'],\n          pathParams: ['backendService', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'backendService'],\n          pathParams: ['backendService', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'backendService'],\n          pathParams: ['backendService', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regionbackendservices;\n  }();\n\n  compute_v1.Resource$Regionbackendservices = Resource$Regionbackendservices;\n\n  var Resource$Regioncommitments = /*#__PURE__*/function () {\n    function Resource$Regioncommitments(context) {\n      _classCallCheck(this, Resource$Regioncommitments);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regioncommitments, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/commitments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/commitments/{commitment}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'commitment'],\n          pathParams: ['commitment', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/commitments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/commitments').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regioncommitments;\n  }();\n\n  compute_v1.Resource$Regioncommitments = Resource$Regioncommitments;\n\n  var Resource$Regiondisks = /*#__PURE__*/function () {\n    function Resource$Regiondisks(context) {\n      _classCallCheck(this, Resource$Regiondisks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regiondisks, [{\n      key: \"createSnapshot\",\n      value: function createSnapshot(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/disks/{disk}/createSnapshot').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'disk'],\n          pathParams: ['disk', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'disk'],\n          pathParams: ['disk', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'disk'],\n          pathParams: ['disk', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"resize\",\n      value: function resize(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/disks/{disk}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'disk'],\n          pathParams: ['disk', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/disks/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/disks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regiondisks;\n  }();\n\n  compute_v1.Resource$Regiondisks = Resource$Regiondisks;\n\n  var Resource$Regiondisktypes = /*#__PURE__*/function () {\n    function Resource$Regiondisktypes(context) {\n      _classCallCheck(this, Resource$Regiondisktypes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regiondisktypes, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/diskTypes/{diskType}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'diskType'],\n          pathParams: ['diskType', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/diskTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regiondisktypes;\n  }();\n\n  compute_v1.Resource$Regiondisktypes = Resource$Regiondisktypes;\n\n  var Resource$Regioninstancegroupmanagers = /*#__PURE__*/function () {\n    function Resource$Regioninstancegroupmanagers(context) {\n      _classCallCheck(this, Resource$Regioninstancegroupmanagers);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regioninstancegroupmanagers, [{\n      key: \"abandonInstances\",\n      value: function abandonInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/abandonInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"deleteInstances\",\n      value: function deleteInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/deleteInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listManagedInstances\",\n      value: function listManagedInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"recreateInstances\",\n      value: function recreateInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/recreateInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"resize\",\n      value: function resize(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'instanceGroupManager', 'size'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setInstanceTemplate\",\n      value: function setInstanceTemplate(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setTargetPools\",\n      value: function setTargetPools(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setTargetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'instanceGroupManager'],\n          pathParams: ['instanceGroupManager', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regioninstancegroupmanagers;\n  }();\n\n  compute_v1.Resource$Regioninstancegroupmanagers = Resource$Regioninstancegroupmanagers;\n\n  var Resource$Regioninstancegroups = /*#__PURE__*/function () {\n    function Resource$Regioninstancegroups(context) {\n      _classCallCheck(this, Resource$Regioninstancegroups);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regioninstancegroups, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listInstances\",\n      value: function listInstances(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}/listInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setNamedPorts\",\n      value: function setNamedPorts(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}/setNamedPorts').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'instanceGroup'],\n          pathParams: ['instanceGroup', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regioninstancegroups;\n  }();\n\n  compute_v1.Resource$Regioninstancegroups = Resource$Regioninstancegroups;\n\n  var Resource$Regionoperations = /*#__PURE__*/function () {\n    function Resource$Regionoperations(context) {\n      _classCallCheck(this, Resource$Regionoperations);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regionoperations, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'operation'],\n          pathParams: ['operation', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'operation'],\n          pathParams: ['operation', 'project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regionoperations;\n  }();\n\n  compute_v1.Resource$Regionoperations = Resource$Regionoperations;\n\n  var Resource$Regions = /*#__PURE__*/function () {\n    function Resource$Regions(context) {\n      _classCallCheck(this, Resource$Regions);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Regions, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Regions;\n  }();\n\n  compute_v1.Resource$Regions = Resource$Regions;\n\n  var Resource$Routers = /*#__PURE__*/function () {\n    function Resource$Routers(context) {\n      _classCallCheck(this, Resource$Routers);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Routers, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/routers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'router'],\n          pathParams: ['project', 'region', 'router'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'router'],\n          pathParams: ['project', 'region', 'router'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getNatMappingInfo\",\n      value: function getNatMappingInfo(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/routers/{router}/getNatMappingInfo').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'router'],\n          pathParams: ['project', 'region', 'router'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getRouterStatus\",\n      value: function getRouterStatus(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/routers/{router}/getRouterStatus').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'router'],\n          pathParams: ['project', 'region', 'router'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/routers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/routers').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'router'],\n          pathParams: ['project', 'region', 'router'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"preview\",\n      value: function preview(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/routers/{router}/preview').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'router'],\n          pathParams: ['project', 'region', 'router'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'router'],\n          pathParams: ['project', 'region', 'router'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Routers;\n  }();\n\n  compute_v1.Resource$Routers = Resource$Routers;\n\n  var Resource$Routes = /*#__PURE__*/function () {\n    function Resource$Routes(context) {\n      _classCallCheck(this, Resource$Routes);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Routes, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/routes/{route}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'route'],\n          pathParams: ['project', 'route'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/routes/{route}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'route'],\n          pathParams: ['project', 'route'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/routes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/routes').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Routes;\n  }();\n\n  compute_v1.Resource$Routes = Resource$Routes;\n\n  var Resource$Securitypolicies = /*#__PURE__*/function () {\n    function Resource$Securitypolicies(context) {\n      _classCallCheck(this, Resource$Securitypolicies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Securitypolicies, [{\n      key: \"addRule\",\n      value: function addRule(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/securityPolicies/{securityPolicy}/addRule').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'securityPolicy'],\n          pathParams: ['project', 'securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'securityPolicy'],\n          pathParams: ['project', 'securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'securityPolicy'],\n          pathParams: ['project', 'securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getRule\",\n      value: function getRule(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/securityPolicies/{securityPolicy}/getRule').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'securityPolicy'],\n          pathParams: ['project', 'securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'securityPolicy'],\n          pathParams: ['project', 'securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patchRule\",\n      value: function patchRule(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/securityPolicies/{securityPolicy}/patchRule').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'securityPolicy'],\n          pathParams: ['project', 'securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"removeRule\",\n      value: function removeRule(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/securityPolicies/{securityPolicy}/removeRule').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'securityPolicy'],\n          pathParams: ['project', 'securityPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Securitypolicies;\n  }();\n\n  compute_v1.Resource$Securitypolicies = Resource$Securitypolicies;\n\n  var Resource$Snapshots = /*#__PURE__*/function () {\n    function Resource$Snapshots(context) {\n      _classCallCheck(this, Resource$Snapshots);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Snapshots, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/snapshots/{snapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'snapshot'],\n          pathParams: ['project', 'snapshot'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/snapshots/{snapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'snapshot'],\n          pathParams: ['project', 'snapshot'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/snapshots/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/snapshots/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setLabels\",\n      value: function setLabels(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/snapshots/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/snapshots/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'resource'],\n          pathParams: ['project', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Snapshots;\n  }();\n\n  compute_v1.Resource$Snapshots = Resource$Snapshots;\n\n  var Resource$Sslcertificates = /*#__PURE__*/function () {\n    function Resource$Sslcertificates(context) {\n      _classCallCheck(this, Resource$Sslcertificates);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Sslcertificates, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'sslCertificate'],\n          pathParams: ['project', 'sslCertificate'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'sslCertificate'],\n          pathParams: ['project', 'sslCertificate'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Sslcertificates;\n  }();\n\n  compute_v1.Resource$Sslcertificates = Resource$Sslcertificates;\n\n  var Resource$Sslpolicies = /*#__PURE__*/function () {\n    function Resource$Sslpolicies(context) {\n      _classCallCheck(this, Resource$Sslpolicies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Sslpolicies, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'sslPolicy'],\n          pathParams: ['project', 'sslPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'sslPolicy'],\n          pathParams: ['project', 'sslPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/sslPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/sslPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listAvailableFeatures\",\n      value: function listAvailableFeatures(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/sslPolicies/listAvailableFeatures').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'sslPolicy'],\n          pathParams: ['project', 'sslPolicy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Sslpolicies;\n  }();\n\n  compute_v1.Resource$Sslpolicies = Resource$Sslpolicies;\n\n  var Resource$Subnetworks = /*#__PURE__*/function () {\n    function Resource$Subnetworks(context) {\n      _classCallCheck(this, Resource$Subnetworks);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Subnetworks, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/subnetworks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetwork}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'subnetwork'],\n          pathParams: ['project', 'region', 'subnetwork'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"expandIpCidrRange\",\n      value: function expandIpCidrRange(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetwork}/expandIpCidrRange').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'subnetwork'],\n          pathParams: ['project', 'region', 'subnetwork'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetwork}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'subnetwork'],\n          pathParams: ['project', 'region', 'subnetwork'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getIamPolicy\",\n      value: function getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/subnetworks/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/subnetworks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/subnetworks').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"listUsable\",\n      value: function listUsable(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/subnetworks/listUsable').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetwork}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'subnetwork'],\n          pathParams: ['project', 'region', 'subnetwork'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setIamPolicy\",\n      value: function setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/subnetworks/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setPrivateIpGoogleAccess\",\n      value: function setPrivateIpGoogleAccess(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetwork}/setPrivateIpGoogleAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'subnetwork'],\n          pathParams: ['project', 'region', 'subnetwork'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"testIamPermissions\",\n      value: function testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/subnetworks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'resource'],\n          pathParams: ['project', 'region', 'resource'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Subnetworks;\n  }();\n\n  compute_v1.Resource$Subnetworks = Resource$Subnetworks;\n\n  var Resource$Targethttpproxies = /*#__PURE__*/function () {\n    function Resource$Targethttpproxies(context) {\n      _classCallCheck(this, Resource$Targethttpproxies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Targethttpproxies, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'targetHttpProxy'],\n          pathParams: ['project', 'targetHttpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'targetHttpProxy'],\n          pathParams: ['project', 'targetHttpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setUrlMap\",\n      value: function setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/targetHttpProxies/{targetHttpProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'targetHttpProxy'],\n          pathParams: ['project', 'targetHttpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Targethttpproxies;\n  }();\n\n  compute_v1.Resource$Targethttpproxies = Resource$Targethttpproxies;\n\n  var Resource$Targethttpsproxies = /*#__PURE__*/function () {\n    function Resource$Targethttpsproxies(context) {\n      _classCallCheck(this, Resource$Targethttpsproxies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Targethttpsproxies, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'targetHttpsProxy'],\n          pathParams: ['project', 'targetHttpsProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'targetHttpsProxy'],\n          pathParams: ['project', 'targetHttpsProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setQuicOverride\",\n      value: function setQuicOverride(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setQuicOverride').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'targetHttpsProxy'],\n          pathParams: ['project', 'targetHttpsProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setSslCertificates\",\n      value: function setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'targetHttpsProxy'],\n          pathParams: ['project', 'targetHttpsProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setSslPolicy\",\n      value: function setSslPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setSslPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'targetHttpsProxy'],\n          pathParams: ['project', 'targetHttpsProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setUrlMap\",\n      value: function setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'targetHttpsProxy'],\n          pathParams: ['project', 'targetHttpsProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Targethttpsproxies;\n  }();\n\n  compute_v1.Resource$Targethttpsproxies = Resource$Targethttpsproxies;\n\n  var Resource$Targetinstances = /*#__PURE__*/function () {\n    function Resource$Targetinstances(context) {\n      _classCallCheck(this, Resource$Targetinstances);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Targetinstances, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/targetInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/targetInstances/{targetInstance}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'targetInstance'],\n          pathParams: ['project', 'targetInstance', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/targetInstances/{targetInstance}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'targetInstance'],\n          pathParams: ['project', 'targetInstance', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/targetInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/targetInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Targetinstances;\n  }();\n\n  compute_v1.Resource$Targetinstances = Resource$Targetinstances;\n\n  var Resource$Targetpools = /*#__PURE__*/function () {\n    function Resource$Targetpools(context) {\n      _classCallCheck(this, Resource$Targetpools);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Targetpools, [{\n      key: \"addHealthCheck\",\n      value: function addHealthCheck(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/targetPools/{targetPool}/addHealthCheck').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'targetPool'],\n          pathParams: ['project', 'region', 'targetPool'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"addInstance\",\n      value: function addInstance(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/targetPools/{targetPool}/addInstance').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'targetPool'],\n          pathParams: ['project', 'region', 'targetPool'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/targetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/targetPools/{targetPool}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'targetPool'],\n          pathParams: ['project', 'region', 'targetPool'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/targetPools/{targetPool}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'targetPool'],\n          pathParams: ['project', 'region', 'targetPool'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"getHealth\",\n      value: function getHealth(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/targetPools/{targetPool}/getHealth').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'targetPool'],\n          pathParams: ['project', 'region', 'targetPool'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/targetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/targetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"removeHealthCheck\",\n      value: function removeHealthCheck(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/targetPools/{targetPool}/removeHealthCheck').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'targetPool'],\n          pathParams: ['project', 'region', 'targetPool'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"removeInstance\",\n      value: function removeInstance(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/targetPools/{targetPool}/removeInstance').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'targetPool'],\n          pathParams: ['project', 'region', 'targetPool'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setBackup\",\n      value: function setBackup(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/targetPools/{targetPool}/setBackup').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'targetPool'],\n          pathParams: ['project', 'region', 'targetPool'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Targetpools;\n  }();\n\n  compute_v1.Resource$Targetpools = Resource$Targetpools;\n\n  var Resource$Targetsslproxies = /*#__PURE__*/function () {\n    function Resource$Targetsslproxies(context) {\n      _classCallCheck(this, Resource$Targetsslproxies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Targetsslproxies, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetSslProxies/{targetSslProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'targetSslProxy'],\n          pathParams: ['project', 'targetSslProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetSslProxies/{targetSslProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'targetSslProxy'],\n          pathParams: ['project', 'targetSslProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetSslProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetSslProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setBackendService\",\n      value: function setBackendService(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetSslProxies/{targetSslProxy}/setBackendService').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'targetSslProxy'],\n          pathParams: ['project', 'targetSslProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setProxyHeader\",\n      value: function setProxyHeader(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetSslProxies/{targetSslProxy}/setProxyHeader').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'targetSslProxy'],\n          pathParams: ['project', 'targetSslProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setSslCertificates\",\n      value: function setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetSslProxies/{targetSslProxy}/setSslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'targetSslProxy'],\n          pathParams: ['project', 'targetSslProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setSslPolicy\",\n      value: function setSslPolicy(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetSslProxies/{targetSslProxy}/setSslPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'targetSslProxy'],\n          pathParams: ['project', 'targetSslProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Targetsslproxies;\n  }();\n\n  compute_v1.Resource$Targetsslproxies = Resource$Targetsslproxies;\n\n  var Resource$Targettcpproxies = /*#__PURE__*/function () {\n    function Resource$Targettcpproxies(context) {\n      _classCallCheck(this, Resource$Targettcpproxies);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Targettcpproxies, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetTcpProxies/{targetTcpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'targetTcpProxy'],\n          pathParams: ['project', 'targetTcpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetTcpProxies/{targetTcpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'targetTcpProxy'],\n          pathParams: ['project', 'targetTcpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetTcpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetTcpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setBackendService\",\n      value: function setBackendService(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetTcpProxies/{targetTcpProxy}/setBackendService').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'targetTcpProxy'],\n          pathParams: ['project', 'targetTcpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"setProxyHeader\",\n      value: function setProxyHeader(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/targetTcpProxies/{targetTcpProxy}/setProxyHeader').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'targetTcpProxy'],\n          pathParams: ['project', 'targetTcpProxy'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Targettcpproxies;\n  }();\n\n  compute_v1.Resource$Targettcpproxies = Resource$Targettcpproxies;\n\n  var Resource$Targetvpngateways = /*#__PURE__*/function () {\n    function Resource$Targetvpngateways(context) {\n      _classCallCheck(this, Resource$Targetvpngateways);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Targetvpngateways, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/targetVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'targetVpnGateway'],\n          pathParams: ['project', 'region', 'targetVpnGateway'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'targetVpnGateway'],\n          pathParams: ['project', 'region', 'targetVpnGateway'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/targetVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/targetVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Targetvpngateways;\n  }();\n\n  compute_v1.Resource$Targetvpngateways = Resource$Targetvpngateways;\n\n  var Resource$Urlmaps = /*#__PURE__*/function () {\n    function Resource$Urlmaps(context) {\n      _classCallCheck(this, Resource$Urlmaps);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Urlmaps, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'urlMap'],\n          pathParams: ['project', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'urlMap'],\n          pathParams: ['project', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"invalidateCache\",\n      value: function invalidateCache(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/urlMaps/{urlMap}/invalidateCache').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'urlMap'],\n          pathParams: ['project', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'urlMap'],\n          pathParams: ['project', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PUT'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'urlMap'],\n          pathParams: ['project', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"validate\",\n      value: function validate(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/global/urlMaps/{urlMap}/validate').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'urlMap'],\n          pathParams: ['project', 'urlMap'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Urlmaps;\n  }();\n\n  compute_v1.Resource$Urlmaps = Resource$Urlmaps;\n\n  var Resource$Vpntunnels = /*#__PURE__*/function () {\n    function Resource$Vpntunnels(context) {\n      _classCallCheck(this, Resource$Vpntunnels);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Vpntunnels, [{\n      key: \"aggregatedList\",\n      value: function aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/aggregated/vpnTunnels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'vpnTunnel'],\n          pathParams: ['project', 'region', 'vpnTunnel'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region', 'vpnTunnel'],\n          pathParams: ['project', 'region', 'vpnTunnel'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/vpnTunnels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}/vpnTunnels').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'region'],\n          pathParams: ['project', 'region'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Vpntunnels;\n  }();\n\n  compute_v1.Resource$Vpntunnels = Resource$Vpntunnels;\n\n  var Resource$Zoneoperations = /*#__PURE__*/function () {\n    function Resource$Zoneoperations(context) {\n      _classCallCheck(this, Resource$Zoneoperations);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Zoneoperations, [{\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'operation'],\n          pathParams: ['operation', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone', 'operation'],\n          pathParams: ['operation', 'project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Zoneoperations;\n  }();\n\n  compute_v1.Resource$Zoneoperations = Resource$Zoneoperations;\n\n  var Resource$Zones = /*#__PURE__*/function () {\n    function Resource$Zones(context) {\n      _classCallCheck(this, Resource$Zones);\n\n      this.context = context;\n    }\n\n    _createClass(Resource$Zones, [{\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project', 'zone'],\n          pathParams: ['project', 'zone'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/compute/v1/projects/{project}/zones').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['project'],\n          pathParams: ['project'],\n          context: this.context\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Zones;\n  }();\n\n  compute_v1.Resource$Zones = Resource$Zones;\n})(compute_v1 = exports.compute_v1 || (exports.compute_v1 = {}));","map":{"version":3,"sources":["/home/vitor/web-projects/starter-project/node_modules/googleapis/build/src/apis/compute/v1.js"],"names":["Object","defineProperty","exports","value","googleapis_common_1","require","compute_v1","Compute","options","google","context","_options","acceleratorTypes","Resource$Acceleratortypes","addresses","Resource$Addresses","autoscalers","Resource$Autoscalers","backendBuckets","Resource$Backendbuckets","backendServices","Resource$Backendservices","disks","Resource$Disks","diskTypes","Resource$Disktypes","firewalls","Resource$Firewalls","forwardingRules","Resource$Forwardingrules","globalAddresses","Resource$Globaladdresses","globalForwardingRules","Resource$Globalforwardingrules","globalOperations","Resource$Globaloperations","healthChecks","Resource$Healthchecks","httpHealthChecks","Resource$Httphealthchecks","httpsHealthChecks","Resource$Httpshealthchecks","images","Resource$Images","instanceGroupManagers","Resource$Instancegroupmanagers","instanceGroups","Resource$Instancegroups","instances","Resource$Instances","instanceTemplates","Resource$Instancetemplates","interconnectAttachments","Resource$Interconnectattachments","interconnectLocations","Resource$Interconnectlocations","interconnects","Resource$Interconnects","licenseCodes","Resource$Licensecodes","licenses","Resource$Licenses","machineTypes","Resource$Machinetypes","networkEndpointGroups","Resource$Networkendpointgroups","networks","Resource$Networks","nodeGroups","Resource$Nodegroups","nodeTemplates","Resource$Nodetemplates","nodeTypes","Resource$Nodetypes","projects","Resource$Projects","regionAutoscalers","Resource$Regionautoscalers","regionBackendServices","Resource$Regionbackendservices","regionCommitments","Resource$Regioncommitments","regionDisks","Resource$Regiondisks","regionDiskTypes","Resource$Regiondisktypes","regionInstanceGroupManagers","Resource$Regioninstancegroupmanagers","regionInstanceGroups","Resource$Regioninstancegroups","regionOperations","Resource$Regionoperations","regions","Resource$Regions","routers","Resource$Routers","routes","Resource$Routes","securityPolicies","Resource$Securitypolicies","snapshots","Resource$Snapshots","sslCertificates","Resource$Sslcertificates","sslPolicies","Resource$Sslpolicies","subnetworks","Resource$Subnetworks","targetHttpProxies","Resource$Targethttpproxies","targetHttpsProxies","Resource$Targethttpsproxies","targetInstances","Resource$Targetinstances","targetPools","Resource$Targetpools","targetSslProxies","Resource$Targetsslproxies","targetTcpProxies","Resource$Targettcpproxies","targetVpnGateways","Resource$Targetvpngateways","urlMaps","Resource$Urlmaps","vpnTunnels","Resource$Vpntunnels","zoneOperations","Resource$Zoneoperations","zones","Resource$Zones","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst googleapis_common_1 = require(\"googleapis-common\");\n// tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\nvar compute_v1;\n(function (compute_v1) {\n    /**\n     * Compute Engine API\n     *\n     * Creates and runs virtual machines on Google Cloud Platform.\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const compute = google.compute('v1');\n     *\n     * @namespace compute\n     * @type {Function}\n     * @version v1\n     * @variation v1\n     * @param {object=} options Options for Compute\n     */\n    class Compute {\n        constructor(options, google) {\n            this.context = { _options: options || {}, google };\n            this.acceleratorTypes = new Resource$Acceleratortypes(this.context);\n            this.addresses = new Resource$Addresses(this.context);\n            this.autoscalers = new Resource$Autoscalers(this.context);\n            this.backendBuckets = new Resource$Backendbuckets(this.context);\n            this.backendServices = new Resource$Backendservices(this.context);\n            this.disks = new Resource$Disks(this.context);\n            this.diskTypes = new Resource$Disktypes(this.context);\n            this.firewalls = new Resource$Firewalls(this.context);\n            this.forwardingRules = new Resource$Forwardingrules(this.context);\n            this.globalAddresses = new Resource$Globaladdresses(this.context);\n            this.globalForwardingRules =\n                new Resource$Globalforwardingrules(this.context);\n            this.globalOperations = new Resource$Globaloperations(this.context);\n            this.healthChecks = new Resource$Healthchecks(this.context);\n            this.httpHealthChecks = new Resource$Httphealthchecks(this.context);\n            this.httpsHealthChecks = new Resource$Httpshealthchecks(this.context);\n            this.images = new Resource$Images(this.context);\n            this.instanceGroupManagers =\n                new Resource$Instancegroupmanagers(this.context);\n            this.instanceGroups = new Resource$Instancegroups(this.context);\n            this.instances = new Resource$Instances(this.context);\n            this.instanceTemplates = new Resource$Instancetemplates(this.context);\n            this.interconnectAttachments =\n                new Resource$Interconnectattachments(this.context);\n            this.interconnectLocations =\n                new Resource$Interconnectlocations(this.context);\n            this.interconnects = new Resource$Interconnects(this.context);\n            this.licenseCodes = new Resource$Licensecodes(this.context);\n            this.licenses = new Resource$Licenses(this.context);\n            this.machineTypes = new Resource$Machinetypes(this.context);\n            this.networkEndpointGroups =\n                new Resource$Networkendpointgroups(this.context);\n            this.networks = new Resource$Networks(this.context);\n            this.nodeGroups = new Resource$Nodegroups(this.context);\n            this.nodeTemplates = new Resource$Nodetemplates(this.context);\n            this.nodeTypes = new Resource$Nodetypes(this.context);\n            this.projects = new Resource$Projects(this.context);\n            this.regionAutoscalers = new Resource$Regionautoscalers(this.context);\n            this.regionBackendServices =\n                new Resource$Regionbackendservices(this.context);\n            this.regionCommitments = new Resource$Regioncommitments(this.context);\n            this.regionDisks = new Resource$Regiondisks(this.context);\n            this.regionDiskTypes = new Resource$Regiondisktypes(this.context);\n            this.regionInstanceGroupManagers =\n                new Resource$Regioninstancegroupmanagers(this.context);\n            this.regionInstanceGroups =\n                new Resource$Regioninstancegroups(this.context);\n            this.regionOperations = new Resource$Regionoperations(this.context);\n            this.regions = new Resource$Regions(this.context);\n            this.routers = new Resource$Routers(this.context);\n            this.routes = new Resource$Routes(this.context);\n            this.securityPolicies = new Resource$Securitypolicies(this.context);\n            this.snapshots = new Resource$Snapshots(this.context);\n            this.sslCertificates = new Resource$Sslcertificates(this.context);\n            this.sslPolicies = new Resource$Sslpolicies(this.context);\n            this.subnetworks = new Resource$Subnetworks(this.context);\n            this.targetHttpProxies = new Resource$Targethttpproxies(this.context);\n            this.targetHttpsProxies = new Resource$Targethttpsproxies(this.context);\n            this.targetInstances = new Resource$Targetinstances(this.context);\n            this.targetPools = new Resource$Targetpools(this.context);\n            this.targetSslProxies = new Resource$Targetsslproxies(this.context);\n            this.targetTcpProxies = new Resource$Targettcpproxies(this.context);\n            this.targetVpnGateways = new Resource$Targetvpngateways(this.context);\n            this.urlMaps = new Resource$Urlmaps(this.context);\n            this.vpnTunnels = new Resource$Vpntunnels(this.context);\n            this.zoneOperations = new Resource$Zoneoperations(this.context);\n            this.zones = new Resource$Zones(this.context);\n        }\n    }\n    compute_v1.Compute = Compute;\n    class Resource$Acceleratortypes {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/acceleratorTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/acceleratorTypes/{acceleratorType}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'acceleratorType'],\n                pathParams: ['acceleratorType', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/acceleratorTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Acceleratortypes = Resource$Acceleratortypes;\n    class Resource$Addresses {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/addresses')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/addresses/{address}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'address'],\n                pathParams: ['address', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/addresses/{address}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'address'],\n                pathParams: ['address', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/addresses')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/addresses')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Addresses = Resource$Addresses;\n    class Resource$Autoscalers {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/autoscalers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/autoscalers/{autoscaler}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'autoscaler'],\n                pathParams: ['autoscaler', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/autoscalers/{autoscaler}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'autoscaler'],\n                pathParams: ['autoscaler', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/autoscalers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/autoscalers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/autoscalers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/autoscalers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Autoscalers = Resource$Autoscalers;\n    class Resource$Backendbuckets {\n        constructor(context) {\n            this.context = context;\n        }\n        addSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/backendBuckets/{backendBucket}/addSignedUrlKey')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/backendBuckets/{backendBucket}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/backendBuckets/{backendBucket}/deleteSignedUrlKey')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket', 'keyName'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/backendBuckets/{backendBucket}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/backendBuckets')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/backendBuckets')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/backendBuckets/{backendBucket}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/backendBuckets/{backendBucket}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Backendbuckets = Resource$Backendbuckets;\n    class Resource$Backendservices {\n        constructor(context) {\n            this.context = context;\n        }\n        addSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/backendServices/{backendService}/addSignedUrlKey')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/backendServices')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/backendServices/{backendService}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/backendServices/{backendService}/deleteSignedUrlKey')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService', 'keyName'],\n                pathParams: ['backendService', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/backendServices/{backendService}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getHealth(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/backendServices/{backendService}/getHealth')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/backendServices')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/backendServices')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/backendServices/{backendService}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setSecurityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/backendServices/{backendService}/setSecurityPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/backendServices/{backendService}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Backendservices = Resource$Backendservices;\n    class Resource$Disks {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/aggregated/disks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        createSnapshot(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/disks/{disk}/createSnapshot')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/disks/{disk}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/disks/{disk}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/disks/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/disks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/disks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        resize(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/disks/{disk}/resize')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/disks/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/disks/{resource}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/disks/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Disks = Resource$Disks;\n    class Resource$Disktypes {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/diskTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/diskTypes/{diskType}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'diskType'],\n                pathParams: ['diskType', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/diskTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Disktypes = Resource$Disktypes;\n    class Resource$Firewalls {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/firewalls/{firewall}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'firewall'],\n                pathParams: ['firewall', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/firewalls/{firewall}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'firewall'],\n                pathParams: ['firewall', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/global/firewalls')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/global/firewalls')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/firewalls/{firewall}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'firewall'],\n                pathParams: ['firewall', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/firewalls/{firewall}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'firewall'],\n                pathParams: ['firewall', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Firewalls = Resource$Firewalls;\n    class Resource$Forwardingrules {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/forwardingRules')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/forwardingRules')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/forwardingRules')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setTarget(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}/setTarget')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Forwardingrules = Resource$Forwardingrules;\n    class Resource$Globaladdresses {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/addresses/{address}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'address'],\n                pathParams: ['address', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/addresses/{address}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'address'],\n                pathParams: ['address', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/global/addresses')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/global/addresses')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Globaladdresses = Resource$Globaladdresses;\n    class Resource$Globalforwardingrules {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/forwardingRules/{forwardingRule}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/forwardingRules/{forwardingRule}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/forwardingRules')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/forwardingRules')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setTarget(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/forwardingRules/{forwardingRule}/setTarget')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Globalforwardingrules = Resource$Globalforwardingrules;\n    class Resource$Globaloperations {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/operations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/operations/{operation}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'operation'],\n                pathParams: ['operation', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/operations/{operation}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'operation'],\n                pathParams: ['operation', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/global/operations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Globaloperations = Resource$Globaloperations;\n    class Resource$Healthchecks {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/healthChecks/{healthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'healthCheck'],\n                pathParams: ['healthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/healthChecks/{healthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'healthCheck'],\n                pathParams: ['healthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/healthChecks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/healthChecks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/healthChecks/{healthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'healthCheck'],\n                pathParams: ['healthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/healthChecks/{healthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'healthCheck'],\n                pathParams: ['healthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Healthchecks = Resource$Healthchecks;\n    class Resource$Httphealthchecks {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/httpHealthChecks/{httpHealthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'httpHealthCheck'],\n                pathParams: ['httpHealthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/httpHealthChecks/{httpHealthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'httpHealthCheck'],\n                pathParams: ['httpHealthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/httpHealthChecks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/httpHealthChecks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/httpHealthChecks/{httpHealthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'httpHealthCheck'],\n                pathParams: ['httpHealthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/httpHealthChecks/{httpHealthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'httpHealthCheck'],\n                pathParams: ['httpHealthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Httphealthchecks = Resource$Httphealthchecks;\n    class Resource$Httpshealthchecks {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'httpsHealthCheck'],\n                pathParams: ['httpsHealthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'httpsHealthCheck'],\n                pathParams: ['httpsHealthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/httpsHealthChecks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/httpsHealthChecks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'httpsHealthCheck'],\n                pathParams: ['httpsHealthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'httpsHealthCheck'],\n                pathParams: ['httpsHealthCheck', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Httpshealthchecks = Resource$Httpshealthchecks;\n    class Resource$Images {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/images/{image}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'image'],\n                pathParams: ['image', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deprecate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/images/{image}/deprecate')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'image'],\n                pathParams: ['image', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/images/{image}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'image'],\n                pathParams: ['image', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getFromFamily(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/images/family/{family}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'family'],\n                pathParams: ['family', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/images/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/global/images')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/global/images')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/images/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/images/{resource}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/images/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Images = Resource$Images;\n    class Resource$Instancegroupmanagers {\n        constructor(context) {\n            this.context = context;\n        }\n        abandonInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/abandonInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/instanceGroupManagers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/deleteInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listManagedInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        recreateInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/recreateInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        resize(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager', 'size'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setInstanceTemplate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setTargetPools(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setTargetPools')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Instancegroupmanagers = Resource$Instancegroupmanagers;\n    class Resource$Instancegroups {\n        constructor(context) {\n            this.context = context;\n        }\n        addInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/addInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/instanceGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instanceGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instanceGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/listInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/removeInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setNamedPorts(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/setNamedPorts')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Instancegroups = Resource$Instancegroups;\n    class Resource$Instances {\n        constructor(context) {\n            this.context = context;\n        }\n        addAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/addAccessConfig')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/instances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        attachDisk(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/attachDisk')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/deleteAccessConfig')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'accessConfig', 'networkInterface'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        detachDisk(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/detachDisk')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'deviceName'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getSerialPortOutput(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/serialPort')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getShieldedInstanceIdentity(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/getShieldedInstanceIdentity')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listReferrers(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/referrers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        reset(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/reset')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setDeletionProtection(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{resource}/setDeletionProtection')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setDiskAutoDelete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setDiskAutoDelete')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'autoDelete', 'deviceName'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setMachineResources(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setMachineResources')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setMachineType(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setMachineType')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setMetadata(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setMetadata')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setMinCpuPlatform(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setMinCpuPlatform')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setScheduling(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setScheduling')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setServiceAccount(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setServiceAccount')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setShieldedInstanceIntegrityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setShieldedInstanceIntegrityPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setTags(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/setTags')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        simulateMaintenanceEvent(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/simulateMaintenanceEvent')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        start(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/start')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        startWithEncryptionKey(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/startWithEncryptionKey')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        stop(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/stop')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateNetworkInterface(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/updateNetworkInterface')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateShieldedInstanceConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/instances/{instance}/updateShieldedInstanceConfig')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Instances = Resource$Instances;\n    class Resource$Instancetemplates {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/instanceTemplates/{instanceTemplate}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'instanceTemplate'],\n                pathParams: ['instanceTemplate', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/instanceTemplates/{instanceTemplate}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'instanceTemplate'],\n                pathParams: ['instanceTemplate', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/instanceTemplates/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/instanceTemplates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/instanceTemplates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/instanceTemplates/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/instanceTemplates/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Instancetemplates = Resource$Instancetemplates;\n    class Resource$Interconnectattachments {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/interconnectAttachments')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'interconnectAttachment'],\n                pathParams: ['interconnectAttachment', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'interconnectAttachment'],\n                pathParams: ['interconnectAttachment', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/interconnectAttachments')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/interconnectAttachments')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'interconnectAttachment'],\n                pathParams: ['interconnectAttachment', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Interconnectattachments = Resource$Interconnectattachments;\n    class Resource$Interconnectlocations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/interconnectLocations/{interconnectLocation}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnectLocation'],\n                pathParams: ['interconnectLocation', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/interconnectLocations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Interconnectlocations = Resource$Interconnectlocations;\n    class Resource$Interconnects {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/interconnects/{interconnect}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnect'],\n                pathParams: ['interconnect', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/interconnects/{interconnect}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnect'],\n                pathParams: ['interconnect', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getDiagnostics(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/interconnects/{interconnect}/getDiagnostics')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnect'],\n                pathParams: ['interconnect', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/interconnects')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/interconnects')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/interconnects/{interconnect}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnect'],\n                pathParams: ['interconnect', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Interconnects = Resource$Interconnects;\n    class Resource$Licensecodes {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/licenseCodes/{licenseCode}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'licenseCode'],\n                pathParams: ['licenseCode', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/licenseCodes/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Licensecodes = Resource$Licensecodes;\n    class Resource$Licenses {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/licenses/{license}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'license'],\n                pathParams: ['license', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/licenses/{license}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'license'],\n                pathParams: ['license', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/licenses/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/global/licenses')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/global/licenses')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/licenses/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/licenses/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Licenses = Resource$Licenses;\n    class Resource$Machinetypes {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/machineTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/machineTypes/{machineType}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'machineType'],\n                pathParams: ['machineType', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/machineTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Machinetypes = Resource$Machinetypes;\n    class Resource$Networkendpointgroups {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/networkEndpointGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        attachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        detachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/networkEndpointGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/networkEndpointGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/networkEndpointGroups/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Networkendpointgroups = Resource$Networkendpointgroups;\n    class Resource$Networks {\n        constructor(context) {\n            this.context = context;\n        }\n        addPeering(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/networks/{network}/addPeering')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/networks/{network}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/networks/{network}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/global/networks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/global/networks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/networks/{network}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removePeering(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/networks/{network}/removePeering')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        switchToCustomMode(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/networks/{network}/switchToCustomMode')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Networks = Resource$Networks;\n    class Resource$Nodegroups {\n        constructor(context) {\n            this.context = context;\n        }\n        addNodes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/addNodes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/nodeGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteNodes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/deleteNodes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/nodeGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'initialNodeCount'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/nodeGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listNodes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/listNodes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setNodeTemplate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/setNodeTemplate')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/nodeGroups/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Nodegroups = Resource$Nodegroups;\n    class Resource$Nodetemplates {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/nodeTemplates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'nodeTemplate'],\n                pathParams: ['nodeTemplate', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'nodeTemplate'],\n                pathParams: ['nodeTemplate', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/nodeTemplates/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/nodeTemplates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/nodeTemplates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/nodeTemplates/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/nodeTemplates/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Nodetemplates = Resource$Nodetemplates;\n    class Resource$Nodetypes {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/nodeTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/nodeTypes/{nodeType}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeType'],\n                pathParams: ['nodeType', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/nodeTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Nodetypes = Resource$Nodetypes;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n        }\n        disableXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/disableXpnHost')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        disableXpnResource(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/disableXpnResource')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        enableXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/enableXpnHost')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        enableXpnResource(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/enableXpnResource')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/getXpnHost')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getXpnResources(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/getXpnResources')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listXpnHosts(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/listXpnHosts')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        moveDisk(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/moveDisk')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        moveInstance(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/moveInstance')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setCommonInstanceMetadata(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/setCommonInstanceMetadata')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setDefaultNetworkTier(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/setDefaultNetworkTier')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setUsageExportBucket(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/setUsageExportBucket')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Projects = Resource$Projects;\n    class Resource$Regionautoscalers {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/autoscalers/{autoscaler}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'autoscaler'],\n                pathParams: ['autoscaler', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/autoscalers/{autoscaler}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'autoscaler'],\n                pathParams: ['autoscaler', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/autoscalers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/autoscalers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/autoscalers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/autoscalers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Regionautoscalers = Resource$Regionautoscalers;\n    class Resource$Regionbackendservices {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/backendServices/{backendService}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/backendServices/{backendService}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getHealth(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/backendServices/{backendService}/getHealth')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/backendServices')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/backendServices')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/backendServices/{backendService}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/backendServices/{backendService}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Regionbackendservices = Resource$Regionbackendservices;\n    class Resource$Regioncommitments {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/commitments')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/commitments/{commitment}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'commitment'],\n                pathParams: ['commitment', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/commitments')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/commitments')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Regioncommitments = Resource$Regioncommitments;\n    class Resource$Regiondisks {\n        constructor(context) {\n            this.context = context;\n        }\n        createSnapshot(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/disks/{disk}/createSnapshot')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/disks/{disk}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/disks/{disk}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/disks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/disks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        resize(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/disks/{disk}/resize')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/disks/{resource}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/disks/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Regiondisks = Resource$Regiondisks;\n    class Resource$Regiondisktypes {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/diskTypes/{diskType}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'diskType'],\n                pathParams: ['diskType', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/diskTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Regiondisktypes = Resource$Regiondisktypes;\n    class Resource$Regioninstancegroupmanagers {\n        constructor(context) {\n            this.context = context;\n        }\n        abandonInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/abandonInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/deleteInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listManagedInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        recreateInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/recreateInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        resize(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resize')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager', 'size'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setInstanceTemplate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setTargetPools(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setTargetPools')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Regioninstancegroupmanagers = Resource$Regioninstancegroupmanagers;\n    class Resource$Regioninstancegroups {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/instanceGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}/listInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setNamedPorts(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}/setNamedPorts')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Regioninstancegroups = Resource$Regioninstancegroups;\n    class Resource$Regionoperations {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/operations/{operation}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'operation'],\n                pathParams: ['operation', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/operations/{operation}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'operation'],\n                pathParams: ['operation', 'project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/operations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Regionoperations = Resource$Regionoperations;\n    class Resource$Regions {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/regions/{region}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/regions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Regions = Resource$Regions;\n    class Resource$Routers {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/routers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/routers/{router}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/routers/{router}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getNatMappingInfo(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/routers/{router}/getNatMappingInfo')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getRouterStatus(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/routers/{router}/getRouterStatus')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/routers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/routers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/routers/{router}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        preview(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/routers/{router}/preview')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/routers/{router}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Routers = Resource$Routers;\n    class Resource$Routes {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/routes/{route}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'route'],\n                pathParams: ['project', 'route'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/routes/{route}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'route'],\n                pathParams: ['project', 'route'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/global/routes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/global/routes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Routes = Resource$Routes;\n    class Resource$Securitypolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        addRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/securityPolicies/{securityPolicy}/addRule')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/securityPolicies/{securityPolicy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/securityPolicies/{securityPolicy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/securityPolicies/{securityPolicy}/getRule')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/securityPolicies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/securityPolicies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/securityPolicies/{securityPolicy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patchRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/securityPolicies/{securityPolicy}/patchRule')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/securityPolicies/{securityPolicy}/removeRule')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Securitypolicies = Resource$Securitypolicies;\n    class Resource$Snapshots {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/snapshots/{snapshot}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'snapshot'],\n                pathParams: ['project', 'snapshot'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/snapshots/{snapshot}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'snapshot'],\n                pathParams: ['project', 'snapshot'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/snapshots/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/global/snapshots')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/snapshots/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/snapshots/{resource}/setLabels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/snapshots/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Snapshots = Resource$Snapshots;\n    class Resource$Sslcertificates {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/sslCertificates/{sslCertificate}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'sslCertificate'],\n                pathParams: ['project', 'sslCertificate'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/sslCertificates/{sslCertificate}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'sslCertificate'],\n                pathParams: ['project', 'sslCertificate'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/sslCertificates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/sslCertificates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Sslcertificates = Resource$Sslcertificates;\n    class Resource$Sslpolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/sslPolicies/{sslPolicy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'sslPolicy'],\n                pathParams: ['project', 'sslPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/sslPolicies/{sslPolicy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'sslPolicy'],\n                pathParams: ['project', 'sslPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/sslPolicies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/sslPolicies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listAvailableFeatures(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/sslPolicies/listAvailableFeatures')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/sslPolicies/{sslPolicy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'sslPolicy'],\n                pathParams: ['project', 'sslPolicy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Sslpolicies = Resource$Sslpolicies;\n    class Resource$Subnetworks {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/subnetworks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetwork}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'subnetwork'],\n                pathParams: ['project', 'region', 'subnetwork'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        expandIpCidrRange(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetwork}/expandIpCidrRange')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'subnetwork'],\n                pathParams: ['project', 'region', 'subnetwork'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetwork}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'subnetwork'],\n                pathParams: ['project', 'region', 'subnetwork'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/subnetworks/{resource}/getIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/subnetworks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/subnetworks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listUsable(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/subnetworks/listUsable')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetwork}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'subnetwork'],\n                pathParams: ['project', 'region', 'subnetwork'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/subnetworks/{resource}/setIamPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setPrivateIpGoogleAccess(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetwork}/setPrivateIpGoogleAccess')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'subnetwork'],\n                pathParams: ['project', 'region', 'subnetwork'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/subnetworks/{resource}/testIamPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Subnetworks = Resource$Subnetworks;\n    class Resource$Targethttpproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetHttpProxies/{targetHttpProxy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpProxy'],\n                pathParams: ['project', 'targetHttpProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetHttpProxies/{targetHttpProxy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpProxy'],\n                pathParams: ['project', 'targetHttpProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetHttpProxies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetHttpProxies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/targetHttpProxies/{targetHttpProxy}/setUrlMap')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpProxy'],\n                pathParams: ['project', 'targetHttpProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Targethttpproxies = Resource$Targethttpproxies;\n    class Resource$Targethttpsproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetHttpsProxies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetHttpsProxies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setQuicOverride(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setQuicOverride')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setSslPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setSslPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Targethttpsproxies = Resource$Targethttpsproxies;\n    class Resource$Targetinstances {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/targetInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/targetInstances/{targetInstance}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'targetInstance'],\n                pathParams: ['project', 'targetInstance', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/targetInstances/{targetInstance}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'targetInstance'],\n                pathParams: ['project', 'targetInstance', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/targetInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/targetInstances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Targetinstances = Resource$Targetinstances;\n    class Resource$Targetpools {\n        constructor(context) {\n            this.context = context;\n        }\n        addHealthCheck(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/targetPools/{targetPool}/addHealthCheck')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        addInstance(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/targetPools/{targetPool}/addInstance')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/targetPools')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/targetPools/{targetPool}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/targetPools/{targetPool}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getHealth(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/targetPools/{targetPool}/getHealth')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/targetPools')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/targetPools')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeHealthCheck(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/targetPools/{targetPool}/removeHealthCheck')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeInstance(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/targetPools/{targetPool}/removeInstance')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setBackup(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/targetPools/{targetPool}/setBackup')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Targetpools = Resource$Targetpools;\n    class Resource$Targetsslproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetSslProxies/{targetSslProxy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetSslProxies/{targetSslProxy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetSslProxies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetSslProxies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setBackendService(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetSslProxies/{targetSslProxy}/setBackendService')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setProxyHeader(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetSslProxies/{targetSslProxy}/setProxyHeader')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetSslProxies/{targetSslProxy}/setSslCertificates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setSslPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetSslProxies/{targetSslProxy}/setSslPolicy')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Targetsslproxies = Resource$Targetsslproxies;\n    class Resource$Targettcpproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetTcpProxies/{targetTcpProxy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetTcpProxy'],\n                pathParams: ['project', 'targetTcpProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetTcpProxies/{targetTcpProxy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetTcpProxy'],\n                pathParams: ['project', 'targetTcpProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetTcpProxies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetTcpProxies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setBackendService(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetTcpProxies/{targetTcpProxy}/setBackendService')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetTcpProxy'],\n                pathParams: ['project', 'targetTcpProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setProxyHeader(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/targetTcpProxies/{targetTcpProxy}/setProxyHeader')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'targetTcpProxy'],\n                pathParams: ['project', 'targetTcpProxy'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Targettcpproxies = Resource$Targettcpproxies;\n    class Resource$Targetvpngateways {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/targetVpnGateways')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetVpnGateway'],\n                pathParams: ['project', 'region', 'targetVpnGateway'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetVpnGateway'],\n                pathParams: ['project', 'region', 'targetVpnGateway'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/targetVpnGateways')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/targetVpnGateways')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Targetvpngateways = Resource$Targetvpngateways;\n    class Resource$Urlmaps {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/urlMaps/{urlMap}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/urlMaps/{urlMap}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/global/urlMaps')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        invalidateCache(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/urlMaps/{urlMap}/invalidateCache')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/global/urlMaps')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/urlMaps/{urlMap}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/urlMaps/{urlMap}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        validate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/global/urlMaps/{urlMap}/validate')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Urlmaps = Resource$Urlmaps;\n    class Resource$Vpntunnels {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/aggregated/vpnTunnels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'vpnTunnel'],\n                pathParams: ['project', 'region', 'vpnTunnel'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'vpnTunnel'],\n                pathParams: ['project', 'region', 'vpnTunnel'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/vpnTunnels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/regions/{region}/vpnTunnels')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Vpntunnels = Resource$Vpntunnels;\n    class Resource$Zoneoperations {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/operations/{operation}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'operation'],\n                pathParams: ['operation', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/operations/{operation}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'operation'],\n                pathParams: ['operation', 'project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/v1/projects/{project}/zones/{zone}/operations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Zoneoperations = Resource$Zoneoperations;\n    class Resource$Zones {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/zones/{zone}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/v1/projects/{project}/zones')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_v1.Resource$Zones = Resource$Zones;\n})(compute_v1 = exports.compute_v1 || (exports.compute_v1 = {}));\n//# sourceMappingURL=v1.js.map"]},"metadata":{},"sourceType":"script"}